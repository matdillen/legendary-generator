    if schemeParts[1] == "Hack Cerebro Servers to..." then
        local kidnappedmutants = get_decks_and_cards_from_zone(twistZoneGUID)
        local hackers = 0
        if kidnappedmutants[1] then
            hackers = math.abs(kidnappedmutants[1].getQuantity())
        end
        local bsdeck = getObjectFromGUID(bystandersPileGUID)
        if twistsresolved < 6 then
            bsdeck.takeObject({position = getObjectFromGUID(twistZoneGUID).getPosition(),
                flip = false,
                smooth = true})
            local hq_cards = {}
            for _,o in pairs(hqguids) do
                local hero = getObjectFromGUID(o).Call('getHeroUp')
                if hero and hasTag2(hero,"Cost:") and hasTag2(hero,"Cost:") == hackers+1 then
                    table.insert(hq_cards,hero)
                end
            end
            if hq_cards[1] then
                promptDiscard({color = Turns.turn_color,
                    hand = hq_cards,
                    pos = getObjectFromGUID(kopile_guid).getPosition(),
                    label = "KO",
                    tooltip = "KO this hero.",
                    trigger_function = function(obj,i) getObjectFromGUID(hqguids[i]).Call('click_draw_hero') end,
                    args = "self"})
                cards[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[1]).getPosition())
                return nil
            end
        elseif twistsresolved == 6 then
            if kidnappedmutants[1] then
                bump(bsdeck)
                kidnappedmutants[1].setPositionSmooth(getObjectFromGUID(bszoneguid).getPosition())
            end
            unveilScheme()
            return nil
        end
        return twistsresolved
    end
    if schemeParts[1] == "Hail Hydra" then
        broadcastToAll("Scheme Twist: This Scheme is not scripted yet.")
        return nil
    end
    if schemeParts[1] == "Hidden Heart of Darkness" then
        local villain_deck = get_decks_and_cards_from_zone(villainDeckZoneGUID)
        local villaindeckcount = 0
        if villain_deck[1] then
            villaindeckcount = math.abs(villain_deck[1].getQuantity())
        end
        for i,o in pairs(vpileguids) do
            if Player[i].seated == true then
                local vpilecontent = get_decks_and_cards_from_zone(o)
                local tacticFound = {}
                if vpilecontent[1] then
                    if vpilecontent[1].getQuantity() > 1  then
                        local vpileCards = vpilecontent[1].getObjects()
                        for j = 1, #vpileCards do
                            for _,k in pairs(vpileCards[j].tags) do
                                if k:find("Tactic:") then
                                    table.insert(tacticFound,vpileCards[j].guid)
                                    break
                                end
                            end
                        end
                        if tacticFound[1] and not tacticFound[2] then
                            vpilecontent[1].takeObject({position = getObjectFromGUID(villainDeckZoneGUID).getPosition(),
                                flip=true,guid=tacticFound[1]})
                            villaindeckcount = villaindeckcount + 1
                        elseif tacticFound[1] then
                            local moveToVilDeck = function(obj)
                                obj.flip()
                                obj.setPosition(getObjectFromGUID(villainDeckZoneGUID).getPosition())
                            end
                            offerCards({color = i,
                                pile = vpilecontent[1],
                                guids = tacticFound,
                                resolve_function = moveToVilDeck,
                                tooltip = "Shuffle this tactic back into the Villain deck.",
                                label = "Shuffle"})
                            villaindeckcount = villaindeckcount + 1
                        end
                    else
                        if hasTag2(vpilecontent[1],"Tactic:",7) then
                            vpilecontent[1].flip()
                            vpilecontent[1].setPositionSmooth(getObjectFromGUID(villainDeckZoneGUID).getPosition())
                            table.insert(tacticFound,vpilecontent[1].guid)
                            villaindeckcount = villaindeckcount + 1
                        end
                    end
                    if tacticFound[1] then
                        local playerBoard = getObjectFromGUID(playerBoards[i])
                        playerBoard.Call('click_draw_card')
                        Wait.time(function() playerBoard.Call('click_draw_card') end,1)
                        printToAll(playerBoards[i] .. " player's tactic was shuffled back in the Villain deck and so they drew two cards.")
                    end
                end
            end
        end
        local tacticsAdded = function()
            local villain_deck = get_decks_and_cards_from_zone(villainDeckZoneGUID)
            if villain_deck[1] and math.abs(villain_deck[1].getQuantity()) == villaindeckcount then
                return true
            else
                return false
            end
        end
        local tacticsFollowup = function()
            local villain_deck = get_decks_and_cards_from_zone(villainDeckZoneGUID)
            if villain_deck[1] then
                villain_deck[1].randomize()
                local pos = getObjectFromGUID("f3c7e3").getPosition()
                pos.y = pos.y + 3
                villain_deck[1].takeObject({position = pos,
                    flip=true})
                pos = getObjectFromGUID("8280ca").getPosition()
                pos.y = pos.y + 3
                villain_deck[1].takeObject({position = pos,
                    flip=true})
                broadcastToAll("Scheme Twist: A tactic from these two cards enters the city. Put the rest back on top or bottom of the villain deck.")
            end
        end
        Wait.condition(tacticsFollowup,tacticsAdded)
    end
    if schemeParts[1] == "Hire Singularity Investigations to..." then
        local bsdeck = getObjectFromGUID(bystandersPileGUID)
        if twistsresolved < 5 then
            local bystanders = bsdeck.getObjects()
            local singularityInvestigatorEnters = function(obj)
                obj.removeTag("Bystander")
                obj.addTag("Power:6")
                obj.addTag("Singularity Investigator")
                obj.setPosition(self.getPosition())
                Wait.time(click_push_villain_into_city,1)
                broadcastToColor("KO one of your heroes and investigate for a card with Recruit.",Turns.turn_color,Turns.turn_color)
            end
            offerCards({color = Turns.turn_color,
                pile = bsdeck,
                guids = {bystanders[1].guid,bystanders[2].guid},
                resolve_function = singularityInvestigatorEnters,
                tooltip = "This bystander will enter the city as a Singularity Investigator Villain.",
                label = "Push",
                flip = true})
            for _,o in pairs(city) do
                local citycontent = get_decks_and_cards_from_zone(o)
                for _,c in pairs(citycontent) do
                    if c.hasTag("Singularity Investigator") then
                        cards[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[1]).getPosition())
                        return nil
                    end
                end
            end
        elseif twistsresolved == 5 then
            unveilScheme()
            return nil
        end
        return twistsresolved
    end
    if schemeParts[1] == "Horror of Horrors" then
        if twistsresolved < 6 then
            getObjectFromGUID(setupGUID).Call('playHorror')
            broadcastToAll("Scheme Twist: Random Horror was played!")
        elseif twistsresolved == 6 then
            broadcastToAll("Scheme Twist: Evil Wins.")
        end
        return twistsresolved
    end
    if schemeParts[1] == "House of M" then
        if not noMoreMutants then
            for _,o in pairs(hqguids) do
                local hero = getObjectFromGUID(o).Call('getHeroUp')
                if hero then
                    if hasTag2(hero,"Team:",6) and hasTag2(hero,"Team:",6) ~= "X-Men" then
                        koCard(hero)
                        broadcastToAll("Sapiens hero KO'd from the HQ!")
                        getObjectFromGUID(o).Call('click_draw_hero')
                    end
                end
            end
            local scarletWitchCount = 0
            for _,o in pairs(city) do
                local citycards = get_decks_and_cards_from_zone(o)
                if citycards[1] then
                    for _,k in pairs(citycards) do
                        if k.getName() == "Scarlet Witch (R)" then
                            scarletWitchCount = scarletWitchCount +1
                        end
                    end
                end
            end
            if scarletWitchCount > 1 then
                local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)
                if scheme[1] then
                    scheme[1].flip()
                    noMoreMutants = true
                    broadcastToAll("No More Mutants!")
                else
                    broadcastToAll("Scheme card missing?")
                end
            else
                click_draw_villain()
            end
        else
            for _,o in pairs(hqguids) do
                local hero = getObjectFromGUID(o).Call('getHeroUp')
                if hero then
                    if hasTag2(hero,"Team:",6) and hasTag2(hero,"Team:",6) == "X-Men" then
                        koCard(hero)
                        getObjectFromGUID(o).Call('click_draw_hero')
                        broadcastToAll("Mutant hero KO'd from the HQ!")
                    end
                end
            end 
            click_draw_villain()
        end
        return twistsresolved
    end
    if schemeParts[1] == "Hydra Helicarriers Hunt Heroes" then
        stackTwist(cards[1])
        if twistsresolved < 5 then
            broadcastToAll("Scheme Twist: Choose " .. twistsresolved .. " different Hero Classes and each hero in the HQ that is any of them will be KO'd.",{1,1,1})
            local mmpromptzone = getObjectFromGUID(city_zones_guids[4])
            local zshift = 0
            local colorspicked = {}
            local buttonindices = {}
            local colors = {"Green","Yellow","Red","Silver","Blue"}
            local colorlabs = {"Green","Yellow","Red","White","Blue"}
            for i,o in ipairs(colors) do
                buttonindices[i] = i-1
                _G["helicarrierColor" .. i] = function()
                    mmpromptzone.removeButton(buttonindices[i])
                    for i2,o2 in pairs(buttonindices) do
                        if i2 > i then
                            buttonindices[i2] = o2-1
                        end
                    end
                    table.insert(colorspicked,o)
                    if #colorspicked > twistsresolved - 1 then
                        mmpromptzone.clearButtons()
                        for _,o3 in pairs(hqguids) do
                            local hero = getObjectFromGUID(o3).Call('getHeroUp')
                            if hero then 
                                for _,color in pairs(colorspicked) do
                                    if hero.hasTag("HC:" .. color) then
                                        koCard(hero)
                                        getObjectFromGUID(o3).Call('click_draw_hero')
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
                mmpromptzone.createButton({click_function="helicarrierColor" .. i,
                    function_owner=self,
                    position={0,0,zshift},
                    rotation={0,180,0},
                    label=o,
                    tooltip="Heroes with this hero color will be KO'd: " .. o,
                    font_size=100,
                    font_color="Black",
                    color=colorlabs[i],
                    width=1500,height=50})
                zshift = zshift + 0.5
            end
        else
            broadcastToAll("Scheme Twist: All heroes in the HQ with a hero class KO'd!")
            for _,o in pairs(hqguids) do
                local hero = getObjectFromGUID(o).Call('getHeroUp')
                --log(hero)
                if hero and hasTag2(hero,"HC:",4) then
                    koCard(hero)
                    getObjectFromGUID(o).Call('click_draw_hero')
                end
            end
        end
        return nil
    end
    if schemeParts[1] == "Hypnotize Every Human" then
        if twistsresolved < 7 then
            local bspile = get_decks_and_cards_from_zone(bszoneguid)[1]
            for i,o in pairs({table.unpack(allTopBoardGUIDS,7,11)}) do
                local topzone = getObjectFromGUID(o)
                bspile.takeObject({position = topzone.getPosition(),
                    flip=false})
            end
        elseif twistsresolved < 9 then
            for _,o in pairs(Player.getPlayers()) do
                local vpilecontent = get_decks_and_cards_from_zone(vpileguids[o.color])
                local vpilevillains = {}
                if vpilecontent[1] and vpilecontent[1].tag == "Deck" then
                    for _,obj in pairs(vpilecontent[1].getObjects()) do
                        for _,k in pairs(obj.tags) do
                            if k == "Villain" then
                                table.insert(vpilevillains,obj.guid)
                                break
                            end
                        end
                    end
                    if vpilevillains[1] and vpilevillains[2] then
                        local moveToEscape = function(obj)
                            obj.setPosition(getObjectFromGUID(escape_zone_guid).getPosition())
                        end
                        log(o.color)
                        log(vpilevillains)
                        offerCards({color = o.color,
                            pile = vpilecontent[1],
                            guids = vpilevillains,
                            resolve_function = moveToEscape,
                            tooltip = "Put this villain in the escape pile.",
                            label = "Escape"})
                    elseif vpilevillains[1] then
                        vpilecontent[1].takeObject({position = getObjectFromGUID(escape_zone_guid).getPosition(),
                            guid = vpilevillains[1]})
                    end
                elseif vpilecontent[1] and vpilecontent[1].hasTag("Villain") then
                    vpilecontent[1].setPositionSmooth(getObjectFromGUID(escape_zone_guid).getPosition())
                end
            end
            broadcastToAll("Scheme Twist: Each player puts a villain from their victory pile into the escape pile.",{1,0,0})
        end
        return twistsresolved
    end
    if schemeParts[1] == "Imprison Unregistered Superhumans" then
        if twistsresolved % 2 == 1 and twistsresolved < 10 then
            local id = math.modf(twistsresolved/2)
            if twistsresolved > 2 then
                getObjectFromGUID(fortifiedCityZoneGUID).clearButtons()
            end
            fortifiedCityZoneGUID = city_zones_guids[6 - id]
            local fortifiedCityZone = getObjectFromGUID(fortifiedCityZoneGUID)
            fortifiedCityZone.createButton({click_function="updatePower",
                function_owner=self,
                position={0,0,0},
                rotation={0,180,0},
                label="+1",
                tooltip="Click to update villain's power!",
                font_size=350,
                font_color={1,0,0},
                color={0,0,0,0.75},
                width=250,height=250})
        else
            local citycards = get_decks_and_cards_from_zone(fortifiedCityZoneGUID)
            if citycards[1] then
                for _,o in pairs(citycards) do
                    if o.hasTag("Villain") then
                        get_decks_and_cards_from_zone(bszoneguid)[1].takeObject({position=getObjectFromGUID(kopile_guid).getPosition(),
                            flip=true})
                        broadcastToAll("Scheme Twist: Bystander KO'd!")
                        break
                    end
                end
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Infiltrate the Lair with Spies" then
        for i,o in pairs(hqguids) do
            local cityzone = getObjectFromGUID(o)
            local bs = cityzone.Call('getBystander')
            if bs then
                bs.setPositionSmooth(getObjectFromGUID(escape_zone_guid).getPosition())
                broadcastToAll("Scheme Twist: Spy escaped from the HQ with sensitive information!",{1,0,0})
            end
            if i % 2 > 0 then
                local pos = cityzone.getPosition()
                pos.z = pos.z - 2
                pos.y = pos.y + 3
                local spystack = get_decks_and_cards_from_zone(twistZoneGUID)
                if spystack[1] then
                    if spystack[1].tag == "Deck" then
                        spystack[1].takeObject({position = pos,
                            flip=true})
                    else
                        spystack[1].flip()
                        spystack[1].setPositionSmooth(pos)
                    end
                else
                    broadcastToAll("No more spies left.")
                end
            end
        end
        broadcastToAll("Scheme Twist: Three bystanders infiltrated the HQ!")
        return twistsresolved
    end
    if schemeParts[1] == "Intergalactic Kree Nega-Bomb" then
        local negabomb = get_decks_and_cards_from_zone(twistZoneGUID)
        cards[1].flip()
        cards[1].setPositionSmooth(getObjectFromGUID(twistZoneGUID).getPosition())
        local twistMoved = function()
            local negabomb_check = get_decks_and_cards_from_zone(twistZoneGUID)
            if negabomb_check[1] and negabomb_check[1].getQuantity() == 7 then
                return true
            else
                return false
            end
        end
        local triggerBomb = function()
            local negabomb = get_decks_and_cards_from_zone(twistZoneGUID)[1]
            negabomb.randomize()
            local negabombcontent = negabomb.getObjects()
            if negabombcontent[1].name == "Scheme Twist" then
                broadcastToAll("Scheme Twist: Nega Bomb detonated. All heroes in HQ KO'd and every player wounded.")
                negabomb.takeObject({position=getObjectFromGUID(kopile_guid).getPosition(),
                    flip=true})
                dealWounds()
                for _,o in pairs(hqguids) do
                    local hero = getObjectFromGUID(o).Call('getHeroUp')
                    if hero then
                        hero.setPositionSmooth(getObjectFromGUID(kopile_guid).getPosition())
                        getObjectFromGUID(o).Call('click_draw_hero')
                    end
                end
            else
                broadcastToAll("Scheme Twist: Nega Bomb detonation averted (for now) and bystander rescued.")
                local pcolor = Turns.turn_color
                if pcolor == "White" then
                    angle = 90
                elseif pcolor == "Blue" then
                    angle = -90
                else
                    angle = 180
                end
                local brot = {x=0, y=angle, z=0}
                local playerBoard = getObjectFromGUID(playerBoards[pcolor])
                local dest = playerBoard.positionToWorld({-0.957, 0.178, 0.222})
                dest.y = dest.y + 3
                negabomb.takeObject({position=dest,
                    flip=true})
            end
        end
        Wait.condition(triggerBomb,twistMoved)
        return nil
    end
    if schemeParts[1] == "Invade the Daily Bugle News HQ" or schemeParts[1] == "Invasion of the Venom Symbiotes" then
        broadcastToAll("Scheme Twist: This scheme is not scripted yet.")
        return nil
    end
    if schemeParts[1] == "Invincible Force Field" then
        stackTwist(cards[1])
        if twistsresolved == 1 then
            local mmzone = getObjectFromGUID(twistZoneGUID)
            mmzone.createButton({click_function="updatePower",
                function_owner=self,
                position={0.5,0,0},
                rotation={0,180,0},
                label="+1/",
                tooltip="Spend this much Recruit (or Attack) to fight the Mastermind.",
                font_size=350,
                font_color="Yellow",
                color={0,0,0,0.75},
                width=250,height=250})
            mmzone.createButton({click_function="updatePower",
                function_owner=self,
                position={-0.5,0,0},
                rotation={0,180,0},
                label="+1",
                tooltip="Spend this much Attack (or Recruit) to fight the Mastermind.",
                font_size=350,
                font_color="Red",
                color={0,0,0,0.75},
                width=250,height=250})
        elseif twistsresolved < 7 then
            local mmzone = getObjectFromGUID(twistZoneGUID)
            mmzone.editButton({index = 0,
                label = "+" .. twistsresolved .. "/"})
            mmzone.editButton({index = 1,
                label = "+" .. twistsresolved})
        else
            broadcastToAll("Scheme Twist: Evil Wins!")
        end
        return nil
    end
    if schemeParts[1] == "Last Stand at Avengers Tower" then
        stackTwist(cards[1])
        if twistsresolved == 1 then
            --may want to modify scale or dimensions
            getObjectFromGUID(city_zones_guids[4]).createButton({click_function="updatePower",
                function_owner=self,
                position={0,0,0},
                rotation={0,180,0},
                label="+1",
                tooltip="Stark defenses extra Attack",
                font_size=350,
                font_color="Red",
                color={0,0,0,0.75},
                width=250,height=200})
        else
            getObjectFromGUID(city_zones_guids[4]).editButton({index=0,
                label="+" .. twistsresolved})
        end
        local citycards = get_decks_and_cards_from_zone(city_zones_guids[4])
        if citycards[1] then
            for _,o in pairs(citycards) do
                if o.hasTag("Villain") then
                    broadcastToAll("Scheme Twist: KO three Heroes from the HQ!",{1,0,0})
                    local heroes = {}
                    for _,obj in pairs(hqguids) do
                        local hero = getObjectFromGUID(obj).Call('getHeroUp')
                        if hero then
                            table.insert(heroes,hero)
                        end
                    end
                    local lastStandDrawNew = function(obj,index)
                        for i,zone in pairs(hqguids) do
                            if i == index then
                                getObjectFromGUID(zone).Call('click_draw_hero')
                                break
                            end
                        end
                    end
                    promptDiscard({color = Turns.turn_color,
                        hand = heroes,
                        n = 3,
                        pos = getObjectFromGUID(kopile_guid).getPosition(),
                        label = "KO",
                        tooltip = "KO this hero.",
                        trigger_function = lastStandDrawNew,
                        args = "self"})
                    break
                end
            end
        end
        return nil
    end
    if schemeParts[1] == "Massive Earthquake Generator" then
        local players = revealCardTrait("Green")
        for i,o in pairs(players) do
            local feastOn = function()
                local deck = getObjectFromGUID(playerBoards[o.color]).Call('returnDeck')
                if deck[1] and deck[1].tag == "Deck" then
                    local pos = getObjectFromGUID(kopile_guid).getPosition()
                    deck[1].takeObject({position = pos,
                        flip=true})
                    return true
                elseif deck[1] then
                    deck[1].flip()
                    koCard(deck[1])
                    return true
                else
                    return false
                end
            end
            local feasted = feastOn()
            broadcastToAll("Scheme Twist: Player " .. o.color .. " had no Green hero and KOs the top card of their deck")
            if feasted == false then
                broadcastToAll("Shuffling " .. o.color .. " player's discard pile into their deck first...")
                local discard = getObjectFromGUID(playerBoards[o.color]).Call('returnDiscardPile')
                if discard[1] then
                    getObjectFromGUID(playerBoards[o.color]).Call('click_refillDeck')
                    Wait.time(feastOn,2)
                end
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Mass Produce War Machine Armor" then
        local twistpile = getObjectFromGUID(twistZoneGUID)
        local twistcount = get_decks_and_cards_from_zone(twistZoneGUID)
        if twistcount[1] then
            twistcountPrevious = twistcount[1].getQuantity()
        else
            twistcountPrevious = 0
        end
        stackTwist(cards[1])
        local twistMoved = function()
            local twist = get_decks_and_cards_from_zone(twistZoneGUID)
            if twist[1] and twist[1].getQuantity() ~= twistcountPrevious then
                return true
            else
                return false
            end
        end
        Wait.condition(updatePower,twistMoved)
        local vpile = get_decks_and_cards_from_zone(vpileguids[Turns.turn_color])
        if vpile[1] then
            local updateAndPush = function()
                updatePower()
                click_push_villain_into_city()
            end
            if vpile[1].tag == "Deck"  then
                local vpileCards = vpile[1].getObjects()
                for j = 1, vpile[1].getQuantity() do
                    if vpileCards[j].name == "S.H.I.E.L.D. Assault Squad" then
                        vpile[1].takeObject({position=getObjectFromGUID(city_zones_guids[1]).getPosition(),
                            guid=vpileCards[j].guid,
                            callback_function = updateAndPush})
                        break
                    end
                end
            else
                if vpile[1].getName() == "S.H.I.E.L.D. Assault Squad" then
                    vpile[1].clearButtons()
                    vpile[1].setPositionSmooth(getObjectFromGUID(city_zones_guids[1]).getPosition())
                    local squadMoved = function()
                        local squad = get_decks_and_cards_from_zone(city_zones_guids[1])
                        if squad[1] and squad[1].getName() == "S.H.I.E.L.D. Assault Squad" then
                            return true
                        else
                            return false
                        end
                    end
                    Wait.condition(updateAndPush,squadMoved)
                end
            end
        end
        return nil
    end
    if schemeParts[1] == "Master of Tyrants" then
        if twistsresolved < 8 then
            broadcastToAll("Scheme Twist: Put this twist under a tyrant as a Dark Power!")
            powerButton({obj = cards[1],
                label = "+2",
                tooltip = "This tyrant gets +2 because of a Dark Power.",
                id = "darkpower" .. twistsresolved})
            cards[1].setName("Dark Power")
            return nil
        elseif twistsresolved == 8 then
            for _,o in pairs(city) do
                local citycards = get_decks_and_cards_from_zone(o)
                if citycards[1] then
                    for _,object in pairs(citycards) do
                        if object.hasTag("Tyrant") then
                            shift_to_next(citycards,getObjectFromGUID(escape_zone_guid),0)
                            broadcastToAll("Scheme Twist: A tyrant escaped!")
                            break
                        end
                    end
                end
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Master the Mysteries of Kung-Fu" then
        stackTwist(cards[1])
        local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)[1]
        if twistsresolved == 1 then
            powerButton({obj = scheme,
                label = "Kung Fu: " .. twistsstacked,
                tooltip = "All villains and masterminds have Circle of Kung Fu equal to the number of twists stacked here."})
            setNotes(getNotes() .. "\r\n\r\n[9D02F9][b]Circle of Kung-Fu:[/b][-] 1")
        else
            scheme.editButton({index=0,label="Kung Fu: " .. twistsstacked})
            local notes = getNotes():gsub("Circle of Kung%-Fu:%[/b%]%[%-%] %d+","Circle of Kung-Fu:[/b][-] " .. twistsstacked,1)
            setNotes(notes)
        end
        return nil
    end
    if schemeParts[1] == "Maximum Carnage" then
        stackTwist(cards[1])
        local streetz = get_decks_and_cards_from_zone(city_zones_guids[5])
        if streetz[1] then
            for _,o in pairs(streetz) do
                if o.hasTag("Villain") then
                    dealWounds()
                    Wait.time(updatePower,2)
                    return nil
                end
            end
        end
        local bsPile = get_decks_and_cards_from_zone(bszoneguid)[1]
        local possessedPsychotic = function(obj)
            obj.addTag("Possessed")
            obj.addTag("Villain")
            obj.removeTag("Bystander") -- complicates vp count!!
            powerButton({obj = obj,
                label = twistsstacked,
                tooltip = "This bystander has become possessed psychotic and is a villain with power equal to the number of stacked twists."})
            updatePower()
        end
        bsPile.takeObject({position = getObjectFromGUID(city_zones_guids[5]).getPosition(),
            flip=true,
            callback_function=possessedPsychotic})
        return nil
    end
    if schemeParts[1] == "Midtown Bank Robbery" then
        local bankz = get_decks_and_cards_from_zone(city_zones_guids[3])
        if bankz[1] then
            for _,o in pairs(bankz) do
                if o.hasTag("Villain") then
                    addBystanders(city_zones_guids[3])
                    addBystanders(city_zones_guids[3])
                    break
                end
            end
        end
        click_draw_villain()
        return twistsresolved
    end
    if schemeParts[1] == "Mutant-Hunting Super Sentinels" then
        stackTwist(cards[1])
        local vildeckzone = getObjectFromGUID(villainDeckZoneGUID)
        local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)[1]
        local vildeckcurrentcount = 0
        if vildeck then
            vildeckcurrentcount = math.abs(vildeck.getQuantity())
        end
        local sentinelsfound = 0
        for _,o in pairs(Player.getPlayers()) do
            local vpilecontent = get_decks_and_cards_from_zone(vpileguids[o.color])[1]
            local copguids = {}
            if vpilecontent and vpilecontent.tag == "Deck" then
                local vpileCards = vpilecontent.getObjects()
                for j = 1, #vpileCards do
                    if vpileCards[j].name == "Sentinel" then
                        table.insert(copguids,vpileCards[j].guid)
                        sentinelsfound = sentinelsfound + 1
                    end
                end
                for j = 1,#copguids do
                    if not vpilecontent.remainder then
                        vpilecontent.takeObject({position=vildeckzone.getPosition(),
                            guid=copguids[j],flip=true})
                    else
                        vpilecontent.remainder.flip()
                        vpilecontent.remainder.setPositionSmooth(vildeckzone.getPosition())
                    end  
                end
            elseif vpilecontent then
                if vpilecontent.getName() == "Sentinel" then
                    vpilecontent.flip()
                    vpilecontent.setPositionSmooth(vildeckzone.getPosition())
                    sentinelsfound = sentinelsfound + 1
                end
            end
        end
        local sentinelsAdded = function()
            local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)[1]
            if vildeck and vildeck.getQuantity() == vildeckcurrentcount + sentinelsfound then
                return true
            else
                return false
            end
        end
        local sentinelsNext = function()
            if sentinelsfound > 0 then
                get_decks_and_cards_from_zone(villainDeckZoneGUID)[1].randomize()
            end
            playVillains()
            updatePower()
        end
        Wait.condition(sentinelsNext,sentinelsAdded)
        return nil
    end
    if schemeParts[1] == "Mutating Gamma Rays" then
        if twistsresolved < 7 then
            broadcastToAll("Scheme Twist: Each player in turn does the following: Put a non-grey Hero from your hand into the Mutation Pile. Then you may put a different card name with the same cost from the Mutation Pile into your discard pile.")
            mutatingcolor = Turns.turn_color
            mutateFromHand = function(color)
                local hand = Player[color].getHandObjects()
                local handi = table.clone(hand)
                local iter = 0
                for i,obj in ipairs(handi) do
                    if not hasTag2(obj,"HC:") then
                        table.remove(hand,i-iter)
                        iter = iter + 1
                    end
                end
                if hand[1] then
                    promptDiscard({color = mutatingcolor,
                        hand = hand,
                        pos = getObjectFromGUID(twistZoneGUID).getPosition(),
                        label = "Mutate",
                        tooltip = "Put this card into the mutation pile. You'll get a different card with the same cost back, if any.",
                        trigger_function = mutateIntoHand,
                        args = "self"})
                else
                    mutatingcolor = getNextColor(mutatingcolor)
                    if mutatingcolor ~= Turns.turn_color then
                        mutateFromHand(mutatingcolor)
                    end
                end
            end
            mutateIntoHand = function(obj,index,color)
                --obj.flip()
                local mutatecontent = get_decks_and_cards_from_zone(twistZoneGUID)[1]
                local keepguids = {}
                for _,c in pairs(mutatecontent.getObjects()) do
                    for _,tag in pairs(c.tags) do
                        if tag:find("Cost:") and tonumber((tag:gsub("Cost:",""))) == hasTag2(obj,"Cost:") then
                            table.insert(keepguids,c.guid)
                            --local json = k.getJSON()
                            --local id = json:match("\"CardID\": %d+"):gsub("\"CardID\": ","")
                            --can't get json from a card inside a container (?)
                            break
                        end
                    end
                end
                -- local temp = {}
                -- local keepguids2 = {}
                -- --doesn't work, guids are unique, cardids duplicated
                -- for _,c in pairs(keepguids) do
                    -- if not temp[c] then
                        -- keepguids2[#keepguids2+1] = c
                        -- temp[c] = true
                    -- end
                -- end
                if keepguids[1] and keepguids[2] then
                    local mutateIntoDiscard = function(obj)
                        obj.setPositionSmooth(getObjectFromGUID(playerBoards[mutatingcolor]).positionToWorld(pos_discard))
                        mutatingcolor = getNextColor(mutatingcolor)
                        if mutatingcolor ~= Turns.turn_color then
                            mutateFromHand(mutatingcolor)
                        end 
                    end
                    offerCards({color = mutatingcolor,
                        pile = mutatecontent,
                        guids = keepguids,
                        resolve_function = mutateIntoDiscard,
                        tooltip = "Gain this card from the mutation pile.",
                        label = "Gain"})
                elseif keepguids[1] then
                    mutatecontent.takeObject({position = getObjectFromGUID(playerBoards[mutatingcolor]).positionToWorld(pos_discard),
                        smooth = true,
                        guid = keepguids[1]})
                    mutatingcolor = getNextColor(mutatingcolor)
                    if mutatingcolor ~= Turns.turn_color then
                        mutateFromHand(mutatingcolor)
                    end 
                else
                    mutatingcolor = getNextColor(mutatingcolor)
                    if mutatingcolor ~= Turns.turn_color then
                        mutateFromHand(mutatingcolor)
                    end 
                end
            end
            mutateFromHand(mutatingcolor)
        else
            broadcastToAll("Scheme Twist: Evil wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Negative Zone Prison Breakout" then
        playVillains({n=2})
        return twistsresolved
    end
    if schemeParts[1] == "Nitro the Supervillain Threatens Crowds" then
        local powerspace = nil
        local power = 0
        for _,o in pairs(city) do
            local citycards = get_decks_and_cards_from_zone(o)
            if citycards[1] then
                for _,object in pairs(citycards) do
                    if object.hasTag("Bystander") then
                        koCard(object)
                        broadcastToAll("Scheme Twist: Bystander KO'd from city!")
                    elseif object.hasTag("Villain") then
                        if powerspace == o then
                            power = power + hasTag2(object,"Power:")
                        elseif hasTag2(object,"Power:") > power then
                            powerspace = o
                            power = hasTag2(object,"Power:")
                        end
                    end
                end
            end
        end
        if powerspace then
            addBystanders(powerspace)
            addBystanders(powerspace)
            addBystanders(powerspace)
        end
        return twistsresolved
    end
    if schemeParts[1] == "Nuclear Armageddon" then
        local destroyed = table.remove(current_city)
        local escapees = get_decks_and_cards_from_zone(destroyed)
        if escapees[1] then
            shift_to_next(escapees,getObjectFromGUID(escape_zone_guid),0)
            for _,o in pairs(escapees) do
                if o.getDescription():find("LOCATION") then
                    koCard(o)
                end
            end
        end
        local setTwist = function()
            cards[1].setPositionSmooth(getObjectFromGUID(destroyed).getPosition())
        end
        Wait.time(setTwist,1)
        return nil
    end
    if schemeParts[1] == "Organized Crime Wave" then
        for _,o in pairs(city) do
            local citycards = get_decks_and_cards_from_zone(o)
            if citycards[1] then
                for _,object in pairs(citycards) do
                    if object.getName() == "Maggia Goons" then
                        shift_to_next(citycards,getObjectFromGUID(escape_zone_guid),0)
                        break
                    end
                end
            end
        end
        local vildeckzone = getObjectFromGUID(villainDeckZoneGUID)
        local vildeckcurrentcount = get_decks_and_cards_from_zone(villainDeckZoneGUID)[1].getQuantity()
        local goonsfound = 0
        for i,o in pairs(vpileguids) do
            if Player[i].seated == true then
                local vpilecontent = get_decks_and_cards_from_zone(o)
                if vpilecontent[1] then
                    if vpilecontent[1].getQuantity() > 1  then
                        local goonguids = {}
                        local vpileCards = vpilecontent[1].getObjects()
                        for j = 1, vpilecontent[1].getQuantity() do
                            if vpileCards[j].name == "Maggia Goons" then
                                table.insert(goonguids,vpileCards[j].guid)
                            end
                        end
                        goonsfound = goonsfound + #goonguids
                        if vpilecontent[1].getQuantity() ~= #goonguids then
                            for j = 1,#copguids do
                                vpilecontent[1].takeObject({position=vildeckzone.getPosition(),
                                    guid=goonguids[j],
                                    flip=true})
                            end
                        else
                            vpilecontent[1].flip()
                            vpilecontent[1].setPositionSmooth(vildeckzone.getPosition())
                        end
                    end
                    if vpilecontent[1].getQuantity() == -1 then
                        if vpilecontent[1].getName() == "Maggia Goons" then
                            vpilecontent[1].flip()
                            vpilecontent[1].setPositionSmooth(vildeckzone.getPosition())
                            goonsfound = goonsfound + 1
                        end
                    end
                end
            end
        end
        local goonsAdded = function()
            local test = vildeckcurrentcount + goonsfound
            local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)
            if vildeck[1] and vildeck[1].getQuantity() == test then
                return true
            else
                return false
            end
        end
        local goonsShuffle = function()
            if goonsfound > 0 then
                local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)
                vildeck[1].randomize()
            end
        end
        Wait.condition(goonsShuffle,goonsAdded)
        return twistsresolved
    end
    if schemeParts[1] == "Pan-Dimensional Plague" then
        for i,o in pairs(hqguids) do
            local cityzone = getObjectFromGUID(o)
            local bs = 1
            while bs do
                bs = cityzone.Call('getWound')
                if bs then
                    koCard(bs)
                end
            end
            local pos = cityzone.getPosition()
            pos.z = pos.z - 2
            pos.y = pos.y + 3
            local spystack = getObjectFromGUID(woundsDeckGUID)
            if spystack then
                if spystack.tag == "Deck" then
                    spystack.takeObject({position = pos,
                        flip=true})
                    if spystack.remainder then
                        woundsDeckGUID = spystack.remainder.guid
                    end
                else
                    spystack.flip()
                    spystack.setPositionSmooth(pos)
                end
            else
                broadcastToAll("Wounds stack ran out.")
            end
        end
        broadcastToAll("Scheme Twist: Wounds were KO'd frm the HQ and new ones added!")
        return twistsresolved
    end
    if schemeParts[1] == "Paralyzing Venom" then
        if twistsresolved < 6 then
            for _,o in pairs(Player.getPlayers()) do
                local hand = o.getHandObjects()
                if #hand > 4 then
                    local bsguids = {}
                    local killBSButton = function(obj)
                        for _,b in pairs(bsguids) do
                            local obj = getObjectFromGUID(b)
                            if obj then
                                obj.clearButtons()
                                obj.locked = false
                                obj.setPosition(getObjectFromGUID(vpileguids[o.color]).getPosition())
                            end
                        end
                    end
                    promptDiscard({color = o.color,
                        hand = hand,
                        n = #hand-4,
                        trigger_function = killBSButton})
                    local vpilecontent = get_decks_and_cards_from_zone(vpileguids[o.color])
                    local killHandButtons = function(obj)
                        obj.clearButtons()
                        koCard(obj)
                        local hand = Player[o.color].getHandObjects()
                        for _,h in pairs(hand) do
                            h.clearButtons()
                        end
                    end
                    if vpilecontent[1] and vpilecontent[1].tag == "Deck" then
                        for _,p in pairs(vpilecontent[1].getObjects()) do
                            for _,k in pairs(p.tags) do
                                if k == "Bystander" then
                                    table.insert(bsguids,p.guid)
                                    break
                                end
                            end
                        end
                        offerCards({color = o.color,
                            pile = vpilecontent[1],
                            guids = bsguids,
                            resolve_function = killHandButtons,
                            tooltip = "KO this bystander.",
                            label = "KO"})
                    elseif vpilecontent[1] and vpilecontent[1].hasTag("Bystander") then
                        _G['killHandButtons' .. o.color] = function(obj)
                            local color = nil
                            for _,b in pairs(obj.getButtons()) do
                                if b.click_function:find("killHandButtons") then
                                    color = b.click_function:gsub("killHandButtons","")
                                end
                            end
                            obj.clearButtons()
                            koCard(obj)
                            local hand = Player[color].getHandObjects()
                            for _,h in pairs(hand) do
                                h.clearButtons()
                            end
                        end
                        vpilecontent[1].createButton({click_function = 'killHandButtons' .. o.color,
                            function_owner=self,
                            position={0,22,0},
                            label="KO",
                            tooltip="KO this bystander.",
                            font_size=250,
                            font_color="Black",
                            color={1,1,1},
                            width=750,height=450})
                        table.insert(bsguids,vpilecontent[1].guid)
                    end
                else
                    broadcastToColor("Scheme Twist: Your hand has less than 5 cards, but you may still KO a bystander from your victory pile if you really hate it.",o.color,o.color)
                end
            end
        else
            broadcastToAll("Scheme Twist: Evil wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Portals to the Dark Dimension" then
        if twistsresolved == 1 then
            local mmZone = getObjectFromGUID(mmZoneGUID)
            koCard(cards[1])
            local mmname = nil
            for i,o in pairs(table.clone(mmZone.Call('returnVar',"mmLocations"),true)) do
                if o == mmZoneGUID then
                    mmname = i
                    break
                end
            end
            getObjectFromGUID(mmZoneGUID).Call('mmButtons',
                {mmname = mmname,
                checkvalue = 1,
                label = "+1",
                tooltip = "A dark portal gives the mastermind + 1.",
                f = "mm",
                id = "darkportal" .. twistsresolved})
            broadcastToAll("Scheme Twist: A dark portal reinforces the mastermind!")
        elseif twistsresolved < 7 then
            if city[7-twistsresolved] then
                --cards[1].setName("Dark Portal")
                koCard(cards[1])
                getObjectFromGUID(city[7-twistsresolved]).Call('updateZonePower',{label = "+1",
                    tooltip = "The Dark Portal gives the villain in this city space +1.",
                    id = "darkportal"})
                -- powerButton({obj = cards[1],
                    -- label = "+1",
                    -- tooltip = "The Dark Portal gives the villain in this city space +1."})
                -- cards[1].setDescription("LOCATION: this isn't actually a location, but the scripts treat it as one and leave it alone.")
                -- local citypos = getObjectFromGUID(city[7-twistsresolved]).getPosition()
                -- citypos.z = citypos.z + 2
                -- citypos.y = citypos.y + 2
                -- cards[1].setPositionSmooth(citypos)
                broadcastToAll("Scheme Twist: A dark portal reinforces a city space!")
            else
                koCard(cards[1])
                broadcastToAll("Scheme Twist: But the city zone does not exist? KO'ing the dark portal.")
            end
        elseif twistsresolved == 7 then
            broadcastToAll("Scheme Twist: Evil wins!")
            koCard(cards[1])
        end
        return nil
    end
    if schemeParts[1] == "Predict Future Crime" then
        local vildeckzone = getObjectFromGUID(villainDeckZoneGUID)
        local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)[1]
        if vildeck then
            local vildeckcount = vildeck.getQuantity()
            local villainsfound = 0
            if vildeck.tag == "Deck" and vildeckcount > 3 then
                local vildeckcontent = vildeck.getObjects()
                local vilcheck = {}
                for j = 1,3 do
                    broadcastToAll("Card revealed from villain deck: " .. vildeckcontent[j].name)
                    for _,k in pairs(vildeckcontent[j].tags) do
                        if k == "Villain" then
                            table.insert(vilcheck,5)
                            villainsfound = villainsfound + 1
                            break
                        end
                    end
                    if not vilcheck[j] then
                        table.insert(vilcheck,2)
                    end
                end
                if villainsfound > 0 and villainsfound < 3 then
                    local playCriminals = function(obj)
                        local cardsLanded = function()
                            local test = get_decks_and_cards_from_zone(villainDeckZoneGUID)[1].getQuantity()
                            if test == vildeckcount then
                                return true
                            else
                                return false
                            end
                        end
                        local playCards = function()
                            playVillains({n=villainsfound})
                        end
                        Wait.condition(playCards,cardsLanded)
                    end
                    local callback_f = nil
                    for j = 1,3 do
                        if j == 3 then
                            callback_f = playCriminals
                        else
                            callback_f = nil
                        end 
                        local vildeckpos = vildeck.getPosition()
                        --add another j to prevent taken objects from spawning into a container
                        --as this prevents the callback from triggering
                        vildeckpos.y = vildeckpos.y + vilcheck[j] + j
                        vildeck.takeObject({position=vildeckpos,
                            callback_function = callback_f})
                    end
                elseif villainsfound == 3 then
                    playVillains({n=3})
                end
            --still script for villain decks of size 3 and 2
            elseif vildeck.tag == "Card" and vildeck.hasTag("Villain") then
                playVillain(1)
            end
        else
            broadcastToAll("Villain deck is empty?")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Pull Earth into Medieval Times" then
        if twistsresolved < 7 then
            local color = Turns.turn_color
            broadcastToAll("All enemies have Chivalrous Duel until " .. color .. "'s next turn!")
            local vildeckzone = getObjectFromGUID(villainDeckZoneGUID)
            vildeckzone.createButton({click_function='updatePower',
                function_owner=self,
                position={3.4,0,0.5},
                rotation={0,180,0},
                scale={2.2,0.5,1.5},
                label="All enemies have Chivalrous Duel!",
                tooltip="Play restriction because of Scheme Twist!",
                font_size=100,
                font_color="Red",
                color={0,0,0},
                width=0})
            local turnHasPassed = function()
                if Turns.getPreviousTurnColor() == color then
                    return true
                else 
                    return false
                end
            end
            local turnAgain = function()
                if Turns.turn_color == color then
                    return true
                else 
                    return false
                end
            end
            local killButton = function()
                vildeckzone.clearButtons()
            end
            local killButtonCallback = function()
                Wait.condition(killButton,turnAgain)
            end
            Wait.condition(killButtonCallback,turnHasPassed)
        elseif twistsresolved < 10 then
            broadcastToAll("Scheme Twist: Each player puts a Villains from their Victory Pile into the Escape Pile.")
            local pos = getObjectFromGUID(escape_zone_guid).getPosition()
            pos.y = pos.y + 2
            for _,p in pairs(Player.getPlayers()) do
                local vpile = get_decks_and_cards_from_zone(vpileguids[p.color])[1]
                local villains = {}
                if vpile and vpile.tag == "Deck" then
                    for _,o in pairs(vpile.getObjects()) do
                        for _,tag in pairs(o.tags) do
                            if tag == "Villain" then
                                table.insert(villains,o.guid)
                                break
                            end
                        end
                    end
                    if villains[1] then
                        if villains[2] then
                            local pushToEscape = function(obj)
                                obj.setPositionSmooth(pos)
                            end
                            offerCards({color = p.color,
                                pile = vpile,
                                guids = villains,
                                resolve_function = pushToEscape,
                                tooltip = "This villain is put into the escape pile!",
                                label = "Escape"})
                        else
                            vpile.takeObject({position = pos,
                                smooth = true})
                        end
                    end
                elseif vpile and vpile.hasTag("Villain") then
                    vpile.setPositionSmooth(pos)
                end
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Pull Reality Into the Negative Zone" then
        local herodeckzone = getObjectFromGUID(heroDeckZoneGUID)
        local vildeckzone = getObjectFromGUID(villainDeckZoneGUID)
        if twistsresolved % 2 == 0 and twistsresolved < 7 then
            broadcastToAll("Scheme Twist: Until next twist, heroes cost attack to recruit and enemies recruit to fight!")
            herodeckzone.createButton({click_function='updatePower',
                function_owner=self,
                position={4,0,0.5},
                rotation={0,180,0},
                scale={3,0.5,1.5},
                label="Heroes cost Attack to recruit!",
                tooltip="Play restriction because of Scheme Twist!",
                font_size=100,
                font_color={1,0.1,0},
                color={0,0,0},
                width=0})
            vildeckzone.createButton({click_function='updatePower',
                function_owner=self,
                position={3.4,0,0.5},
                rotation={0,180,0},
                scale={2.2,0.5,1.5},
                label="Enemies cost Recruit to fight!",
                tooltip="Play restriction because of Scheme Twist!",
                font_size=100,
                font_color="Yellow",
                color={0,0,0},
                width=0})
        elseif twistsresolved < 7 and twistsresolved > 1 then
            broadcastToAll("Scheme Twist: Resource reversions are relieved!")
            herodeckzone.clearButtons()
            vildeckzone.clearButtons()
        elseif twistsresolved == 7 then
            broadcastToAll("Evil Wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Pulse Waves from the Negative Zone" then
        if twistsresolved < 9 and twistsresolved % 2 == 1 then
            broadcastToColor("Scheme Twist: NEGATIVE PULSE This turn heroes in the HQ cost 1 less and villains/masterminds get -1!",Turns.turn_color,Turns.turn_color)
        elseif twistsresolved < 9 and twistsresolved % 2 == 0 then
            broadcastToColor("Scheme Twist: POSITIVE PULSE This turn heroes in the HQ cost 1 more and villains/masterminds get +1!",Turns.turn_color,Turns.turn_color) 
        elseif twistsresolved == 9 then
            broadcastToAll("Scheme Twist: Evil wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Put Humanity on Trial" then
        broadcastToColor("Scheme Twist: Fulfill this challenge or a juror condemns humanity! Challenges are not scripted.",Turns.turn_color,Turns.turn_color)
        if twistsresolved < 3 then
            broadcastToColor("Challenge: Discard three cards with different names!",Turns.turn_color,Turns.turn_color)
        elseif twistsresolved < 9 and twistsresolved % 2 == 1 then
            broadcastToColor("Challenge: Recruit a hero that costs 5 or more!",Turns.turn_color,Turns.turn_color)
        elseif twistsresolved < 9 and twistsresolved % 2 == 0 then
            broadcastToColor("Challenge: Defeat villains worth a total of 3VP or more!",Turns.turn_color,Turns.turn_color)  
        elseif twistsresolved < 12 then
            broadcastToColor("Challenge: Defeat (not just fight) the mastermind!",Turns.turn_color,Turns.turn_color)
        else
            broadcastToColor("No more challenges!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Ragnarok, Twilight of the Gods" then
        local vpile = get_decks_and_cards_from_zone(vpileguids[Turns.turn_color])[1]
        cards[1].setName("Guardian Defeated")
        stackTwist(cards[1])
        if vpile and vpile.tag == "Deck" then
            local villainguids = {}
            for _,o in pairs(vpile.getObjects()) do
                for _,tag in pairs(o.tags) do
                    if tag:find("VP") and tonumber((tag:gsub("VP",""))) > 1 then
                        table.insert(villainguids,o.guid)
                        break
                    end
                end
            end
            if #villainguids > 1 then
                local pushTwilightVillain = function(obj)
                    obj.setPosition(getObjectFromGUID(city_zones_guids[1]).getPosition())
                    Wait.time(click_push_villain_into_city,1)
                end
                offerCards({color = Turns.turn_color,
                    pile = vpile,
                    guids = villainguids,
                    resolve_function = pushTwilightVillain,
                    tooltip = "Push this villain into the city.",
                    label = "Push"})
                broadcastToColor("Scheme Twist: Choose a villain from your victory pile with VP 2 or more to enter the city.",Turns.turn_color,Turns.turn_color)
            elseif villainguids[1] then
                vpile.takeObject({position = getObjectFromGUID(city_zones_guids[1]).getPosition(),
                    smooth = false,
                    guid = villainguids[1],
                    callback_function = click_push_villain_into_city})
                broadcastToColor("Scheme Twist: The villain from your victory pile with VP 2 or more enters the city.",Turns.turn_color,Turns.turn_color)
            end
        elseif vpile and hasTag2(vpile,"VP") and hasTag2(vpile,"VP") > 1 then
            vpile.setPosition(getObjectFromGUID(city_zones_guids[1]).getPosition())
            Wait.time(click_push_villain_into_city,1)
            broadcastToColor("Scheme Twist: The villain from your victory pile with VP 2 or more enters the city.",Turns.turn_color,Turns.turn_color)
        end
        local ragnarokGuardians = {
            {"Balder",11},
            {"Odin",24},
            {"Vidar",19},
            {"Tyr",16},
            {"Heimdall",12},
            {"Frey",7},
            {"Frigga",8},
            {"Warriors of Valhalla",6}
        }
        if twistsresolved < 8 then
            broadcastToAll("If the total power of villains (after choosing one from your victory pile to enter) is not greater than the power of Guardian " 
                .. ragnarokGuardians[twistsresolved][1] .. 
                " (" .. ragnarokGuardians[twistsresolved][2] .. ") then you can move the last twist from next to the scheme to the KO pile.")
        elseif twistsresolved < 12 then
            broadcastToAll("If the total power of villains (after choosing one from your victory pile to enter) is not greater than the power of Guardian " 
                .. ragnarokGuardians[8][1] .. 
                " (" .. ragnarokGuardians[8][2] .. ") then you can move the last twist from next to the scheme to the KO pile.")
        end
        return nil
    end
    if schemeParts[1] == "Raid Gene Banks to..." then
        if twistsresolved < 4 then
            local bankcontent = get_decks_and_cards_from_zone(city_zones_guids[3])
            for _,c in pairs(bankcontent) do
                if c.hasTag("Villain") then
                    cards[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[1]).getPosition())
                    return nil
                end
            end
            broadcastToColor("Move a villain to the bank, if any!",Turns.turn_color,Turns.turn_color)
        elseif twistsresolved == 4 then
            unveilScheme()
            return nil
        end
        return twistsresolved
    end
    if schemeParts[1] == "Replace Earth's Leaders with Killbots" then
        stackTwist(cards[1])
        updatePower()
        return nil
    end
    if schemeParts[1] == "Resurrect Heroes with Norn Stones" then
        if twistsresolved < 7 then
            local vpile = get_decks_and_cards_from_zone(vpileguids[Turns.turn_color])[1]
            local villains = {}
            local pos = getObjectFromGUID(city_zones_guids[6]).getPosition()
            pos.y = pos.y + 2
            if vpile and vpile.tag == "Deck" then
                for _,o in pairs(vpile.getObjects()) do
                    for _,tag in pairs(o.tags) do
                        if tag == "Villain" then
                            table.insert(villains,o.guid)
                            break
                        end
                    end
                end
                if villains[1] then
                    local cityobjects = get_decks_and_cards_from_zone(city_zones_guids[6])
                    if cityobjects[1] then
                        shift_to_next(cityobjects,getObjectFromGUID(escape_zone_guid),0)
                    end
                    if villains[2] then
                        local pushToBridge = function(obj)
                            obj.setPositionSmooth(pos)
                        end
                        offerCards({color = Turns.turn_color,
                            pile = vpile,
                            guids = villains,
                            resolve_function = pushToBridge,
                            tooltip = "This villain enters the Bridge!",
                            label = "Push"})
                    else
                        vpile.takeObject({position = pos,
                            smooth = true})
                    end
                end
            elseif vpile and vpile.hasTag("Villain") then
                local cityobjects = get_decks_and_cards_from_zone(city_zones_guids[6])
                if cityobjects[1] then
                    shift_to_next(cityobjects,getObjectFromGUID(escape_zone_guid),0)
                end
                vpile.setPositionSmooth(pos)
            end
            playVillains()
        elseif twistsresolved < 9 then
            local pos = getObjectFromGUID(escape_zone_guid).getPosition()
            pos.y = pos.y + 2
            for _,p in pairs(Player.getPlayers()) do
                local vpile = get_decks_and_cards_from_zone(vpileguids[p.color])[1]
                local villains = {}
                if vpile and vpile.tag == "Deck" then
                    for _,o in pairs(vpile.getObjects()) do
                        for _,tag in pairs(o.tags) do
                            if tag == "Villain" then
                                table.insert(villains,o.guid)
                                break
                            end
                        end
                    end
                    if villains[1] then
                        if villains[2] then
                            local pushToEscape = function(obj)
                                obj.setPositionSmooth(pos)
                            end
                            offerCards({color = p.color,
                                pile = vpile,
                                guids = villains,
                                resolve_function = pushToEscape,
                                tooltip = "This villain is put into the escape pile!",
                                label = "Escape"})
                        else
                            vpile.takeObject({position = pos,
                                smooth = true})
                        end
                    end
                elseif vpile and vpile.hasTag("Villain") then
                    vpile.setPositionSmooth(pos)
                end
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Reveal Heroes' Secret Identities" then
        if twistsresolved == 1 then
            unmasked = {}
        end
        for _,o in pairs(hqguids) do
            local hero = getObjectFromGUID(o).Call('getHeroUp')
            local isUnmasked = false
            if hero then
                for _,p in pairs(unmasked) do
                    if hero.getName() == p then
                        isUnmasked = true
                        break
                    end
                end
                if not isUnmasked then
                    _G["unmaskHero" .. hero.guid] = function(obj)
                        local hero = obj.Call('getHeroUp')
                        if not hero then
                            return nil
                        else
                            for _,k in pairs(hqguids) do
                                local butt = getObjectFromGUID(k).getButtons()
                                for i,b in pairs(butt) do
                                    if b.click_function:find("unmaskHero") then
                                        getObjectFromGUID(k).removeButton(i-1)
                                    end
                                end
                            end
                            table.insert(unmasked,hero.getName())
                            hero.setPositionSmooth(getObjectFromGUID(twistZoneGUID).getPosition())
                            obj.Call('click_draw_hero')
                        end
                    end
                    getObjectFromGUID(o).createButton({click_function="unmaskHero" .. hero.guid,
                        function_owner=self,
                        position={0,2,0},
                        label="Unmask",
                        tooltip="Unmask this hero",
                        font_size=250,
                        font_color="Black",
                        color={1,1,1},
                        width=750,height=450})
                end
            end
        end
        function checkUnmasked()
            for _,o in pairs(hqguids) do
                local hero = getObjectFromGUID(o).Call('getHeroUp')
                if hero then
                    local isUnmasked = false
                    for _,k in pairs(unmasked) do
                        if hero.getName() == k then
                            updateUnmasked(o,true)
                            isUnmasked = true
                            break
                        end
                    end
                    if isUnmasked == false then
                        updateUnmasked(o,false)
                    end
                end
            end
        end
        function updateUnmasked(guid,isUnmasked)
            local butt = getObjectFromGUID(guid).getButtons()
            for i,o in pairs(butt) do
                if o.label == "+1*" then
                    if isUnmasked == false then
                        getObjectFromGUID(guid).removeButton(i-1)
                    end
                    return nil
                end
            end
            if isUnmasked == true then
                getObjectFromGUID(guid).createButton({click_function='updatePower',
                    function_owner=self,
                    position={0,2,-2},
                    label="+1*",
                    tooltip="All cards with Unmasked Hero Names cost +1 to recruit.",
                    font_size=500,
                    font_color="Yellow",
                    color={1,1,1,0.85},
                    width=0})
            end
        end
        function onObjectEnterZone(zone,object)
            Wait.time(checkUnmasked,1)
        end
        function onObjectLeaveZone(zone,object)
            Wait.time(checkUnmasked,1)
        end
        return twistsresolved
    end
    if schemeParts[1] == "Ruin the Perfect Wedding" then
        local pcolor = Turns.turn_color
        if pcolor == "White" then
            angle = 90
        elseif pcolor == "Blue" then
            angle = -90
        else
            angle = 180
        end
        local brot = {x=0, y=angle, z=0}
        local playerBoard = getObjectFromGUID(playerBoards[pcolor])
        local dest = playerBoard.positionToWorld(pos_discard)
        dest.y = dest.y + 3
        if twistsresolved == 1 then
            local tobewed = get_decks_and_cards_from_zone(topBoardGUIDs[8])
            tobewed[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[7]).getPosition())
            tobewed[1].takeObject({position = dest,rotation = brot})
            broadcastToAll("Scheme Twist: Hero " .. schemeParts[9]:gsub(".*%|","") .. " moved to the altar!")
        elseif twistsresolved == 2 then
            local tobewed = get_decks_and_cards_from_zone(topBoardGUIDs[1])
            tobewed[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[2]).getPosition())
            tobewed[1].takeObject({position = dest,rotation = brot})
            broadcastToAll("Scheme Twist: Hero " .. schemeParts[9]:gsub("%|.*","") .. " moved to the door!")
        elseif twistsresolved < 8 then
            local aislehero = get_decks_and_cards_from_zone(allTopBoardGUIDS[3+twistsresolved])[1]
            local altarhero = get_decks_and_cards_from_zone(allTopBoardGUIDS[11])[1]
            local resolveTheRuinedWedding = function(obj,index,color)
                obj.takeObject({position = dest,
                    rotation = brot})
                if twistsresolved == 3 then
                    for i=1,2 do
                        aislehero.takeObject({position = getObjectFromGUID(kopile_guid).getPosition(),
                            smooth = true})
                    end
                else
                    local citycontent = get_decks_and_cards_from_zone(city_zones_guids[-twistsresolved+10])
                    if citycontent[1] then
                        for _,o in pairs(citycontent) do
                            if o.hasTag("Villain") or o.hasTag("Mastermind") then
                                for i=1,2 do
                                    aislehero.takeObject({position = getObjectFromGUID(kopile_guid).getPosition(),
                                        smooth = true})
                                end
                                break
                            end
                        end
                    end
                end
                local citycontent = get_decks_and_cards_from_zone(city_zones_guids[2])
                if citycontent[1] then
                    for _,o in pairs(citycontent) do
                        if o.hasTag("Villain") or o.hasTag("Mastermind") then
                            for i=1,2 do
                                altarhero.takeObject({position = getObjectFromGUID(kopile_guid).getPosition(),
                                    smooth = true})
                            end
                            break
                        end
                    end
                end
                if twistsresolved < 7 then
                    aislehero.setPositionSmooth(getObjectFromGUID(allTopBoardGUIDS[4+twistsresolved]).getPosition())
                else
                    altarhero.setPositionSmooth(getObjectFromGUID(allTopBoardGUIDS[12]).getPosition())
                    aislehero.setPositionSmooth(getObjectFromGUID(allTopBoardGUIDS[4+twistsresolved]).getPosition())
                end
            end
            promptDiscard({color = Turns.turn_color,
                hand = {aislehero,altarhero},
                pos = "Stay",
                label = "Gain",
                tooltip = "Gain a card from this wedding stack.",
                trigger_function = resolveTheRuinedWedding,
                args = "self",
                buttonheight = 8})
            broadcastToAll("Scheme Twist: Gain the top card of one of the hero stacks. Two cards from each hero stack are KO'd if an enemy occupies the city space below it. Then the left stack is moved one space to the right.")
        elseif twistsresolved < 12 then
            local aislehero = get_decks_and_cards_from_zone(allTopBoardGUIDS[11])[1]
            local altarhero = get_decks_and_cards_from_zone(allTopBoardGUIDS[12])[1]
            if not aislehero or not altarhero or aislehero.tag == "Card" or altarhero.tag == "Card" or aislehero.getQuantity() == 2 or altarhero.getQuantity() == 2 then
                broadcastToAll("Wedding hero completely KO'd after this twist. Evil wins!")
                return nil
            else
                for i=1,2 do
                    altarhero.takeObject({position = getObjectFromGUID(kopile_guid).getPosition(),
                        smooth = true})
                    aislehero.takeObject({position = getObjectFromGUID(kopile_guid).getPosition(),
                        smooth = true})
                end
            end
            broadcastToAll("Scheme Twist: Two cards from each hero stack KO'd.")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Save Humanity" then
        for _,o in pairs(hqguids) do
            local hero = getObjectFromGUID(o).Call('getBystander')
            if hero and hero.hasTag("Bystander") then
                koCard(hero)
                getObjectFromGUID(o).Call('click_draw_hero')
                broadcastToAll("Scheme Twist: Bystander KO'd from the HQ!")
            end
        end
        broadcastToAll("Scheme Twist: Each player reveals a Yellow Hero or KOs a Bystander from their Victory Pile.")
        local players = revealCardTrait("Yellow")
        local pos = getObjectFromGUID(kopile_guid).getPosition()
        pos.y = pos.y + 2
        for _,o in pairs(players) do
            local vpile = get_decks_and_cards_from_zone(vpileguids[o.color])[1]
            if vpile and vpile.tag == "Deck" then
                local bsguids = {}
                for _,c in pairs(vpile.getObjects()) do
                    for _,tag in pairs(c.tags) do
                        if tag == "Bystander" then
                            table.insert(bsguids,c.guid)
                            break
                        end
                    end
                end
                if #bsguids > 1 then
                    offerCards({color = o.color,
                        pile = vpile,
                        guids = bsguids,
                        resolve_function = koCard,
                        tooltip = "KO this bystander.",
                        label = "KO"})
                elseif #bsguids == 1 then
                    vpile.takeObject({position = pos,smooth = true, guid = bsguids[1]})
                end
            elseif vpile and vpile.hasTag("Bystander") then
                vpile.setPositionSmooth(pos)
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Scavenge Alien Weaponry" then
        playVillains({n=2})
        return twistsresolved
    end
    if schemeParts[1] == "Secret Empire of Betrayal" then
        cards[1].flip()
        cards[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[5]).getPosition())
        local twistAdded = function()
            local darkloyalty = get_decks_and_cards_from_zone(topBoardGUIDs[5])
            if darkloyalty[1] and darkloyalty[1].getQuantity() == 6 then
                return true
            else
                return false
            end
        end
        local twistPlay = function()
            local darkloyalty = get_decks_and_cards_from_zone(topBoardGUIDs[5])
            darkloyalty[1].randomize()
            local darkCard = darkloyalty[1].getObjects()[1]
            if darkCard.name == "Scheme Twist" then
                darkloyalty[1].takeObject({position = getObjectFromGUID(twistZoneGUID).getPosition(),
                    flip=true})
                for i,_ in pairs(playerBoards) do
                    if Player[i].seated == true and i ~= Turns.turn_color then
                        click_get_wound(nil,i)
                        broadcastToAll("Scheme Twist: Vicious Betrayal!")
                    end
                end
            else
                local pcolor = Turns.turn_color
                if pcolor == "White" then
                    angle = 90
                elseif pcolor == "Blue" then
                    angle = -90
                else
                    angle = 180
                end
                local brot = {x=0, y=angle, z=0}
                local playerBoard = getObjectFromGUID(playerBoards[pcolor])
                local dest = playerBoard.positionToWorld({-0.957, 0.178, 0.222})
                dest.y = dest.y + 3
                darkloyalty[1].takeObject({position = dest,
                    flip=true})
                broadcastToAll("Scheme Twist: " .. pcolor .. " player gained a random hero!")
            end
        end
        Wait.condition(twistPlay,twistAdded)
        return nil
    end
    if schemeParts[1] == "Secret HYDRA Corruption" then
        local twistpile = getObjectFromGUID(twistZoneGUID)
        local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)[1]
        if not scheme then
            broadcastToAll("Scheme card missing???")
            return nil
        end
        if twistsresolved == 1 then
            officerdeck = getObjectFromGUID(officerDeckGUID)
            twistpile.createButton({click_function="updatePower",
                function_owner=self,
                position={0,0,0},
                rotation={0,180,0},
                label="3",
                tooltip="Pay 3 Recruit to have any player gain one of these Officers.",
                font_size=350,
                font_color="Yellow",
                color={0,0,0,0.75},
                width=250,height=250})
        end
        if scheme.is_face_down == false then
            scheme.flip()
            twistpile.editButton({tooltip = "Fight for 3 to return any of these officers to the Officer deck and KO one of your heroes.",
                font_color = "Red"})
        else
            scheme.flip()
            twistpile.editButton({tooltip = "Pay 3 Recruit to have any player gain one of these Officers.",
                font_color = "Yellow"})
        end
        for i = 1,twistsresolved do
            if officerdeck.getQuantity() > 1 then
                officerdeck.takeObject({position=twistpile.getPosition(),
                    flip=true,
                    smooth=true})
                if officerdeck.remainder then
                    officerdeck = officerdeck.remainder
                end
            else
                officerdeck.flip()
                officerdeck.setPositionSmooth(twistpile.getPosition())
                officerdeck = nil
                break
            end
        end
        if not officerdeck then
            broadcastToAll("Officer deck ran out. Evil wins!",{1,0,0})
        end
        return twistsresolved
    end
    if schemeParts[1] == "Secret Invasion of the Skrull Shapeshifters" then
        koCard(cards[1])
        local cost = 0
        local highestguid = {}
        local pos = getObjectFromGUID(city_zones_guids[1]).getPosition()
        for i,o in pairs(hqguids) do
            local hero = getObjectFromGUID(o).Call('getHeroUp')
            if hero and hasTag2(hero,"Cost:") > cost then
                cost = hasTag2(hero,"Cost:")
                highestguid = {[i] = hero}
            elseif hero and hasTag2(hero,"Cost:") == cost then
                highestguid[i] = hero
            end
        end
        local count = 0
        for _,o in pairs(highestguid) do
            count = count + 1
        end
        if count > 1 then
            broadcastToAll("Choose one of the highest cost heroes in the HQ to enter the city as a Skrull Villain.")
            local drawNew = function(obj,index,color)
                getObjectFromGUID(hqguids[index]).Call('click_draw_hero')
                local heroMoved = function()
                    local entercard = get_decks_and_cards_from_zone(city_zones_guids[1])
                    if entercard[1] and entercard[1].guid == obj.guid then
                        return true
                    else
                        return false
                    end
                end
                Wait.condition(click_push_villain_into_city,heroMoved)
            end
            promptDiscard({color = Turns.turn_color,
                hand = highestguid,
                pos = pos,
                label = "Push",
                tooltip = "Push this hero into the city as a Skrull Villain.",
                trigger_function = drawNew,
                args = "self"})
        else
            for i,o in pairs(highestguid) do
                o.setPositionSmooth(pos)
                getObjectFromGUID(hqguids[i]).Call('click_draw_hero')
                local heroMoved = function()
                    local entercard = get_decks_and_cards_from_zone(city_zones_guids[1])
                    if entercard[1] and entercard[1].guid == o.guid then
                        return true
                    else
                        return false
                    end
                end
                Wait.condition(click_push_villain_into_city,heroMoved)
            end
        end
        return nil
    end
    if schemeParts[1] == "Secret Wars" then
        if twistsresolved < 4 then
            local mmPile = getObjectFromGUID(mmPileGUID)
            mmPile.randomize()
            local stripTactics = function(obj)
                obj.flip()
                local mmZone = getObjectFromGUID(mmZoneGUID)
                mmZone.Call('updateMasterminds',obj.getName())
                mmZone.Call('updateMastermindsLocation',{obj.getName(),topBoardGUIDs[4+2*(twistsresolved-1)]})
                mmZone.Call('setupMasterminds',{obj.getName(),false,1})
                local keep = math.random(4)
                local tacguids = {}
                for i = 1,4 do
                    table.insert(tacguids,obj.getObjects()[i].guid)
                end
                local tacticsPile = getObjectFromGUID(topBoardGUIDs[2])
                for i = 1,4 do
                    if i ~= keep then
                        obj.takeObject({position = tacticsPile.getPosition(),
                            guid = tacguids[i],
                            flip = true})
                    end
                end
                local flipTactics = function()
                    if obj then
                        local pos = obj.getPosition()
                        pos.y = pos.y + 3
                        obj.takeObject({position = pos,
                            index = obj.getQuantity()-1,
                            flip=true})
                    end
                end
                Wait.time(flipTactics,1)
            end
            mmPile.takeObject({position = getObjectFromGUID(topBoardGUIDs[4+2*(twistsresolved-1)]).getPosition(),callback_function = stripTactics})
        elseif twistsresolved == 8 then
            broadcastToAll("Scheme Twist: Evil Wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "S.H.I.E.L.D. vs. HYDRA War" then
        local officerdeck = getObjectFromGUID(officerDeckGUID)
        local twistpilecontent = get_decks_and_cards_from_zone(twistZoneGUID)
        if twistsresolved == 1 then
            getObjectFromGUID(twistZoneGUID).createButton({click_function="updatePower",
                function_owner=self,
                position={0,0,0},
                rotation={0,180,0},
                label="3",
                tooltip="Fight for 3 to gain any of these Officers as heroes or send them Undercover to your Victory Pile.",
                font_size=350,
                font_color="Red",
                color={0,0,0,0.75},
                width=250,height=250})
        end
        if twistpilecontent[1] then
            broadcastToAll("Scheme Twist: An Officer escaped! HYDRA level increased!")
            if twistpilecontent[1].tag == "Deck" then
                local bottomRest = function(obj)
                    local twistpilecontent = get_decks_and_cards_from_zone(twistZoneGUID)
                    twistpilecontent[1].flip()
                    twistpilecontent[1].setPositionSmooth(officerdeck.getPosition())
                end
                twistpilecontent[1].takeObject({position=getObjectFromGUID(escape_zone_guid).getPosition(),
                    callback_function = bottomRest})
            else
                twistpilecontent[1].setPositionSmooth(getObjectFromGUID(escape_zone_guid).getPosition())
            end
        end
        for i = 1,#Player.getPlayers() do
            officerdeck.takeObject({position=getObjectFromGUID(twistZoneGUID).getPosition(),
                flip=true})
        end
        return twistsresolved
    end
    if schemeParts[1] == "Shoot Hulk into Space" then
        if twistsresolved == 1 then
            function click_buy_hulk(obj,player_clicker_color)
                local hulkdeck = get_decks_and_cards_from_zone(obj.guid)[1]
                if not hulkdeck then
                    return nil
                end
                local playerBoard = getObjectFromGUID(playerBoards[player_clicker_color])
                local dest = playerBoard.positionToWorld(pos_discard)
                dest.y = dest.y + 3
                if player_clicker_color == "White" then
                    angle = 90
                elseif player_clicker_color == "Blue" then
                    angle = -90
                else
                    angle = 180
                end
                local brot = {x=0, y=angle, z=0}
                if hulkdeck.tag == "Card" then
                    hulkdeck.setRotationSmooth(brot)
                    hulkdeck.setPositionSmooth(dest)
                else
                    hulkdeck.takeObject({position=dest,rotation=brot,flip=false,smooth=true})
                end
            end
            getObjectFromGUID("bd3ef1").createButton({
                 click_function="click_buy_hulk", 
                 function_owner=self,
                 position={0,0,-0.75},
                 rotation={0,180,0},
                 label="Buy Hulk",
                 tooltip="Buy the top card of the Prison Ship.",
                 color={1,1,1,1},
                 width=800,
                 height=200,
                 font_size = 100
            })
        end
        local hulkdeck = get_decks_and_cards_from_zone(twistZoneGUID)
        if hulkdeck[1] and hulkdeck[1].getQuantity() > 2 then
            hulkdeck[1].takeObject({position = getObjectFromGUID("bd3ef1").getPosition(),
                flip = true,
                smooth = true})
            hulkdeck[1].takeObject({position = getObjectFromGUID("bd3ef1").getPosition(),
                flip = true,
                smooth = true})
        elseif hulkdeck[1] then
            hulkdeck[1].flip()
            hulkdeck[1].setPositionSmooth(getObjectFromGUID("bd3ef1").getPosition())
        else
            broadcastToAll("Scheme Twist: No Hulk deck found, so Evil Wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Silence the Witnesses" then
        if twistsresolved == 1 then
            function click_save_silent_witness(obj,player_clicker_color)
                local hulkdeck = get_decks_and_cards_from_zone(obj.guid)[1]
                if not hulkdeck then
                    return nil
                end
                local playerBoard = getObjectFromGUID(playerBoards[player_clicker_color])
                local dest = playerBoard.positionToWorld(pos_vp2)
                dest.y = dest.y + 3
                if player_clicker_color == "White" then
                    angle = 90
                elseif player_clicker_color == "Blue" then
                    angle = -90
                else
                    angle = 180
                end
                local brot = {x=0, y=angle, z=0}
                if hulkdeck.tag == "Card" then
                    hulkdeck.flip()
                    hulkdeck.setRotationSmooth(brot)
                    hulkdeck.setPositionSmooth(dest)
                else
                    hulkdeck.takeObject({position = dest,
                        flip = true,
                        smooth = true,
                        index = math.random(hulkdeck.getQuantity())-1})
                end
            end
            getObjectFromGUID(twistZoneGUID).createButton({click_function='click_save_silent_witness', 
                     function_owner=self,
                     position={0,0,0.5},
                     rotation={0,180,0},
                     label="Save",
                     tooltip="Save a Hidden Witness by paying 2 recruit and rescue it as a bystander.",
                     color={0,0,0,1},
                     font_color = {1,0,0},
                     width=500,
                     height=200,
                     font_size = 100})
            getObjectFromGUID(twistZoneGUID).createButton({click_function='updatePower',
                        function_owner=self,
                        position={0,0,0},
                        rotation={0,180,0},
                        label=2,
                        tooltip="You can save these Hidden Witnesses for 2 Recruit to rescue them as Bystanders.",
                        font_size=250,
                        font_color="Yellow",
                        width=0})
        end
        local witnesses = get_decks_and_cards_from_zone(twistZoneGUID)
        broadcastToAll("Scheme Twist: All Silent Witnesses escape and three new ones are added.")
        for _,o in pairs(witnesses) do
            o.flip()
            o.setPositionSmooth(getObjectFromGUID(escape_zone_guid).getPosition())
        end
        for i = 1,3 do
            addBystanders(twistZoneGUID,false,true)
        end
        return twistsresolved
    end
    if schemeParts[1] == "Sinister Ambitions" then
        stackTwist(cards[1])
        if twistsresolved < 6 then
            updatePower()
            playVillains()
        elseif twistsresolved == 6 then
            koCard(cards[1])
            for _,o in pairs(city) do
                local citycards = get_decks_and_cards_from_zone(o)
                if citycards[1] then
                    for _,o in pairs(citycards) do
                        if o.hasTag("Ambition") then
                           shift_to_next(citycards,getObjectFromGUID(escape_zone_guid),0)
                           broadcastToAll("Scheme Twist: Ambition villain escapes!")
                           break
                        end
                    end
                end
            end
        end
        return nil
    end
    if schemeParts[1] == "Smash Two Dimensions Together" then
        playVillains({n=2})
        broadcastToAll("Scheme Twist: Two cards are played from the villain deck!")
        return twistsresolved
    end
    if schemeParts[1] == "Sniper Rifle Assassins" then
        for _,o in pairs(Player.getPlayers()) do
            local dodgeSniper = function()
                local hand = o.getHandObjects()
                getObjectFromGUID(playerBoards[o.color]).Call('click_draw_card')
                Wait.condition(
                    function()
                        local hand2 = o.getHandObjects()
                        if hasTag2(hand2[1],"HC:") then
                            koCard(hand2[1])
                        end
                    end,
                    function()
                        local hand2 = o.getHandObjects()
                        if #hand == #hand2 then
                            return true
                        else
                            return false
                        end
                    end)
            end
            endpromptDiscard({color = o.color,
                trigger_function = dodgeSniper})
            broadcastToColor("Scheme Twist: Discard a card, then you'll draw a card but it will be KO'd if it's a nongrey hero!",o.color,o.color)
        end
        return twistsresolved
    end
    if schemeParts[1] == "Splice Humans with Spider DNA" then
        broadcastToAll("Each player puts a Sinister Six villain from their Victory Pile on top of the villain deck. Then, a single card from the villain deck is played.")
        local ssfound = 0
        local vildeckcount = math.abs(get_decks_and_cards_from_zone(villainDeckZoneGUID)[1].getQuantity())
        --breaks if no villain deck left, but this should end the game
        local pos = getObjectFromGUID(villainDeckZoneGUID).getPosition()
        pos.y = pos.y + 2
        for _,o in pairs(Player.getPlayers()) do
            local vpile = get_decks_and_cards_from_zone(vpileguids[o.color])[1]
            if vpile and vpile.tag == "Deck" then
                local ssguids = {}
                for _,obj in pairs(vpile.getObjects()) do
                    for _,tag in pairs(obj.tags) do
                        if tag == "Group:Sinister Six" then
                            table.insert(ssguids,obj.guid)
                            break
                        end
                    end
                end
                if #ssguids > 1 then
                    ssfound = ssfound + 1
                    local sinisterSixReturns = function(obj)
                        obj.flip()
                        obj.setPositionSmooth(pos)
                    end
                    offerCards({color = o.color,
                        pile = vpile,
                        guids = ssguids,
                        resolve_function = sinisterSixReturns,
                        tooltip = "Return this Sinister Six villain to the top of the villain deck.",
                        label = "Return"})
                elseif ssguids[1] then
                    ssfound = ssfound + 1
                    vpile.takeObject({position = pos,
                        flip = true,
                        guid = ssguids[1]})
                end
            elseif vpile and vpile.hasTag("Group:Sinister Six") then
                vpile.flip()
                ssfound = ssfound + 1
                vpile.setPositionSmooth(pos)
            end
        end
        local ssAdded = function()
            local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)[1]
            if vildeck.getQuantity() == ssfound + vildeckcount then
                return true
            else
                return false
            end
        end
        Wait.condition(playVillains,ssAdded)
        return twistsresolved
    end
    if schemeParts[1] == "Steal All Oxygen on Earth" then
        stackTwist(cards[1])
        broadcastToAll("Scheme Twist: The Oxygen level decreases to " .. 8-twistsstacked .. ". Any hero with cost greater than the oxygen level is KO'd from the HQ.")
        local notes = getNotes():gsub("Oxygen Level:%[/b%]%[%-%] %d+","Oxygen Level:[/b][-] " .. 8-twistsstacked,1)
        setNotes(notes)
        for _,o in pairs(hqguids) do
            local hero = getObjectFromGUID(o).Call('getHeroUp')
            if hero and hasTag2(hero,"Cost:") > 8 - twistsstacked then
                koCard(hero)
                getObjectFromGUID(o).Call('click_draw_hero')
                broadcastToAll("Scheme Twist: " .. hero.getName() .. " suffocated and was KO'd")
            end
        end
        return nil
    end
    if schemeParts[1] == "Steal the Weaponized Plutonium" then
        cards[1].setDescription("VILLAINOUS WEAPON: This plutonium gives +1. Shuffle it back into the villain deck if the villain holding it is defeated.")
        powerButton({obj = cards[1],
            label = "+1",
            tooltip = "This plutonium gives +1. Shuffle it back into the villain deck if the villain holding it is defeated."})
        --these will often become stacks and that will kill the button...
        playVillains()
        return twistsresolved
    end
    if schemeParts[1] == "Subjugate with Obedience Disks" then
        broadcastToAll("Put this twist in one of the zones above the board. A zone cannot have more than two twists in it.")
        function onObjectEnterZone()
            updateHQTags()
            Wait.time(updateHQTags,1)
        end
        return nil
    end
    if schemeParts[1] == "Super Hero Civil War" then
        broadcastToAll("Scheme Twist: All heroes in the HQ KO'd")
        for _,o in pairs(hqguids) do
            local hero = getObjectFromGUID(o).Call('getHeroUp')
            if hero then
                koCard(hero)
                getObjectFromGUID(o).Call('click_draw_hero')
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Symbiotic Absorption" then
        local mmZone=getObjectFromGUID(mmZoneGUID)
        if twistsresolved < 5 then
            local mmcards = get_decks_and_cards_from_zone(mmZoneGUID)
            local mmcount = 0
            if mmcards[1] then
                for _,o in pairs(mmcards) do
                    if o.is_face_down == true then
                        mmcount = math.abs(o.getQuantity())
                    end
                end
            else
                broadcastToAll("No mastermind found?")
                return nil
            end
            local mmshuffle = function(obj)
                local mmcards = get_decks_and_cards_from_zone(mmZoneGUID)
                local pos = getObjectFromGUID(mmZoneGUID).getPosition()
                pos.y = pos.y + 3
                if mmcards[1] then
                    for _,o in pairs(mmcards) do
                        if o.is_face_down == false then
                            o.setPositionSmooth(pos)
                            break
                        end
                    end
                end
                local mmSepShuffle = function()
                    local mmcards = get_decks_and_cards_from_zone(mmZoneGUID)
                    mmcards[1].randomize()
                    log("Mastermind tactics shuffled")
                end
                Wait.time(mmSepShuffle,1)
            end
            local tacticMoved = function()
                local mmcards = get_decks_and_cards_from_zone(mmZoneGUID)
                if mmcards[1] then
                    for _,o in pairs(mmcards) do
                        if o.is_face_down == true then
                            if mmcount == math.abs(o.getQuantity())-1 then
                                return true
                            end
                        end
                    end
                    return false
                else
                    return false
                end
            end
            local drainedmm = get_decks_and_cards_from_zone(topBoardGUIDs[1])
            if drainedmm[1] then
                for _,o in pairs(drainedmm) do
                    if o.is_face_down == true then
                        if o.getQuantity() > 1 then
                            o.takeObject({position = mmZone.getPosition()})
                        else
                            o.setPositionSmooth(mmZone.getPosition())
                        end
                        Wait.condition(mmshuffle,tacticMoved)
                    end
                end
            else
                broadcastToAll("Drained mastermind not found.")
                return nil
            end
            Wait.time(function() 
                getObjectFromGUID(mmZoneGUID).Call('click_update_tactics',getObjectFromGUID(mmZoneGUID))
                end,1.5)
        elseif twistsresolved % 2 == 0 and twistsresolved < 11 then
            broadcastToAll("Scheme Twist: This twist copies the master strike effect of the drained mastermind!")
            local result = resolveStrike(schemeParts[9],false,city,cards,true)
            if result then
                return twistsresolved
            else
                return nil
            end
        elseif twistsresolved == 11 then
            broadcastToAll("Scheme Twist: Evil wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Televised Deathtraps of Mojoworld" then
        stackTwist(cards[1])
        broadcastToAll("Scheme Twist: Fight the deathtraps (click the value hovering the scheme card) before end of turn or every player gets a wound!")
        resolveDeathtraps = function(obj,player_clicker_color)
            broadcastToAll("Deathtraps averted by player " .. player_clicker_color)
            obj.clearButtons()
        end
        local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)
        if scheme[1] then
            powerButton({obj = scheme[1],
                label = twistsstacked,
                tooltip = "Resolve the deathtraps by spending this much Attack.",
                click_f = "resolveDeathtraps"})
            local pcolor = Turns.turn_color
            local turnChanged = function()
                if Turns.turn_color == pcolor then
                    return false
                else
                    return true
                end
            end
            local deathTrapsActivated = function()
                local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)
                if scheme[1] and scheme[1].getButtons() then
                    scheme[1].clearButtons()
                    broadcastToAll("Death traps activated. Each player gains a wound.")
                    dealWounds()
                elseif not scheme[1] then
                    broadcastToAll("Scheme card not found?")
                end
            end
            Wait.condition(deathTrapsActivated,turnChanged)
        else
            broadcastToAll("Scheme card not found?")
        end
        return nil
    end
    if schemeParts[1] == "The Clone Saga" then
        for _,o in pairs(Player.getPlayers()) do
            local hand = o.getHandObjects()
            local cardids = {}
            local clonecheck = false
            for _,k in pairs(hand) do
                if hasTag2(k,"HC:",4) then
                    local json = k.getJSON()
                    local id = json:match("\"CardID\": %d+"):gsub("\"CardID\": ","")
                    --log(id)
                    for _,l in pairs(cardids) do
                        if id == l then
                            clonecheck = true
                            break
                        end
                    end
                    if clonecheck == true then
                        break
                    else
                        table.insert(cardids,id)
                    end
                end
            end
            if clonecheck == false and #hand > 3 then
                promptDiscard({color = o.color, n = #hand-3})
                broadcastToColor("Scheme Twist: Discard down to 3 cards!",o.color,o.color)
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "The Contest of Champions" then
        if twistsresolved == 1 then
            contestantsPV = table.clone(getObjectFromGUID("912967").Call('returnContestants'))
        end
        local contestant = getObjectFromGUID(table.remove(contestantsPV,1))
        local color = hasTag2(contestant,"HC:",4)
        koCard(contestant)
        local championContest = function(obj)
            for i,o in pairs(obj) do
                if i == "Evil" and o == true then
                    local woundsdeck = getObjectFromGUID(woundsDeckGUID)
                    if woundsdeck.tag == "Deck" then
                        woundsdeck.takeObject({position = getObjectFromGUID(twistZoneGUID).getPosition(),
                            flip=true,
                            smooth=true})
                    else
                        woundsdeck.flip()
                        woundsdeck.setPositionSmooth(getObjectFromGUID(twistZoneGUID).getPosition())
                    end
                    broadcastToAll("Scheme Twist: Evil won the contest, so a wound was stacked next to the scheme as an Evil Triumph!")
                elseif o == false and i ~= "Evil" then
                    promptDiscard(i)
                    broadcastToColor("You lost the contest, so discard a card",i,i)
                end
            end
        end
        local contestn = 0
        local epicgrandmaster = false
        if schemeParts[4] == "The Grandmaster - epic" then
            epicgrandmaster = true
        end
        if twistsresolved < 5 then
            contestn = 2
        elseif twistsresolved < 9 then
            contestn = 4
        elseif twistsresolved < 12 then 
            contestn = 6
        end
        contestOfChampions({color = color,
            n = contestn,
            winf = championContest,
            epicness = epicgrandmaster})
    end
    if schemeParts[1] == "The Dark Phoenix Saga" then
        local kopilecontent = get_decks_and_cards_from_zone(kopile_guid)
        local vildeckZone = getObjectFromGUID(villainDeckZoneGUID)
        local jeanfound = 0
        local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)
        local vildeckcount = 0
        if vildeck[1] then
            vildeckcount = vildeck[1].getQuantity()
        end
        broadcastToAll("Scheme Twist: All Jean Grey hero cards in discard piles, hand or the KO pile are shuffled back into the Villain deck.")
        if kopilecontent[1] and kopilecontent[1].tag == "Deck" then
            for _,o in pairs(kopilecontent[1].getObjects()) do
                if o.name == "Jean Grey (DC)" then
                    kopilecontent[1].takeObject({position = vildeckZone.getPosition(),
                        guid = o.guid,
                        flip=true})
                    jeanfound = jeanfound + 1
                    if kopilecontent[1].remainder then
                        if kopilecontent[1].remainder.getName() == "Jean Grey (DC)" then
                            kopilecontent[1].flip()
                            kopilecontent[1].setPositionSmooth(vildeckZone.getPosition())
                            jeanfound = jeanfound + 1
                        end
                        break
                    end
                end
            end
        elseif kopilecontent[1] then
            if kopilecontent[1].getName() == "Jean Grey (DC)" then
                kopilecontent[1].flip()
                kopilecontent[1].setPositionSmooth(vildeckZone.getPosition())
                jeanfound = jeanfound + 1
            end
        end
        for _,o in pairs(Player.getPlayers()) do
            local hand = o.getHandObjects()
            if hand[1] then
                for _,h in pairs(hand) do
                    if h.getName() == "Jean Grey (DC)" then
                        h.flip()
                        h.setPosition(vildeckZone.getPosition())
                        jeanfound = jeanfound + 1
                    end
                end
            end
        end
        for i,o in pairs(playerBoards) do
            if Player[i].seated == true then
                local discard = getObjectFromGUID(o).Call('returnDiscardPile')
                if discard[1] and discard[1].tag == "Deck" then
                    for _,o in pairs(discard[1].getObjects()) do
                        if o.name == "Jean Grey (DC)" then
                            discard[1].takeObject({position = vildeckZone.getPosition(),
                                guid = o.guid,
                                flip=true})
                            jeanfound = jeanfound + 1
                            if discard[1].remainder then
                                if discard[1].remainder.getName() == "Jean Grey (DC)" then
                                    discard[1].flip()
                                    discard[1].setPositionSmooth(vildeckZone.getPosition())
                                    jeanfound = jeanfound + 1
                                end
                                break
                            end
                        end
                    end
                elseif discard[1] then
                    if discard[1].getName() == "Jean Grey (DC)" then
                        discard[1].flip()
                        discard[1].setPositionSmooth(vildeckZone.getPosition())
                        jeanfound = jeanfound + 1
                    end
                end
            end
        end
        local jeangreyadded = function()
            local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)
            if vildeck[1] and vildeck[1].getQuantity() == vildeckcount + jeanfound then
                return true
            else
                return false
            end
        end
        local shufflejean = function()
            local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)
            vildeck[1].randomize()
        end
        if jeanfound > 0 then
            Wait.condition(shufflejean,jeangreyadded)
        end
        return twistsresolved
    end
    if schemeParts[1] == "The Demon Bear Saga" then
        koCard(cards[1])
        --check if Bear is in the city
        for _,o in pairs(city) do
            local cityobjects = get_decks_and_cards_from_zone(o)
            if cityobjects[1] then
                for _,object in pairs(cityobjects) do
                    if object.getName() == "Demon Bear" then
                        shift_to_next(cityobjects,getObjectFromGUID(escape_zone_guid),0,schemeParts)
                        broadcastToAll("Scheme Twist! Demon Bear escapes!",{1,0,0})
                        return nil
                    end
                end
            end
        end
        --or his starting spot
        local cityobjects = get_decks_and_cards_from_zone(twistZoneGUID)
        if cityobjects[1] and cityobjects[1].getName() == "Demon Bear" then
            cityobjects[1].setPositionSmooth(getObjectFromGUID(city_zones_guids[1]).getPosition())
            local bearMoved = function()
                local bear = get_decks_and_cards_from_zone(city_zones_guids[1])
                if bear[1] and bear[1].getName() == "Demon Bear" then
                    return true
                else
                    return false
                end
            end
            Wait.condition(click_push_villain_into_city,bearMoved)
            broadcastToAll("Scheme Twist! The Demon Bear entered the city.",{1,0,0})
            return nil
        end
        --or the escape pile
        local escapedobjects = get_decks_and_cards_from_zone(escape_zone_guid)
        if escapedobjects[1] and escapedobjects[1].tag == "Deck" then
            for _,object in pairs(escapedobjects[1].getObjects()) do
                if object.name == "Demon Bear" then
                    escapedobjects[1].takeObject({guid=object.guid,
                        position=getObjectFromGUID(city_zones_guids[1]).getPosition(),
                        smooth=true,
                        callback_function = click_push_villain_into_city})
                    broadcastToAll("Scheme Twist! The Demon Bear re-entered the city from the escape pile.",{1,0,0})
                    return nil
                end
            end
        elseif escapedobjects[1] and escapedobjects[1].tag == "Card" then
            if escapedobjects[1].getName() == "Demon Bear" then
                escapedobjects[1].setPositionSmooth(getObjectFromGUID(city_zones_guids[1]).getPosition())
                local bearMoved = function()
                    local bear = get_decks_and_cards_from_zone(city_zones_guids[1])
                    if bear[1] and bear[1].getName() == "Demon Bear" then
                        return true
                    else
                        return false
                    end
                end
                Wait.condition(click_push_villain_into_city,bearMoved)
                broadcastToAll("Scheme Twist! The Demon Bear re-entered the city from the escape pile.",{1,0,0})
                return nil
            end
        end
        --or the victory pile
        for i,o in pairs(vpileguids) do
            if Player[i].seated == true then
                local vpobjects = get_decks_and_cards_from_zone(o)
                if vpobjects[1] and vpobjects[1].tag == "Deck" then
                    for _,object in pairs(vpobjects[1].getObjects()) do
                        if object.name == "Demon Bear" then
                            vpobjects[1].takeObject({guid=object.guid,
                                position=getObjectFromGUID(city_zones_guids[1]).getPosition(),
                                smooth=true,
                                callback_function = click_push_villain_into_city})
                            broadcastToAll("Scheme Twist! The Demon Bear re-entered the city from ".. i .. " player's victory pile.",{1,0,0})
                            click_rescue_bystander(nil,i)
                            click_rescue_bystander(nil,i)
                            click_rescue_bystander(nil,i)
                            click_rescue_bystander(nil,i)
                            return nil
                        end
                    end
                elseif vpobjects[1] and vpobjects[1].tag == "Card" then
                    if vpobjects[1].getName() == "Demon Bear" then
                        vpobjects[1].setPositionSmooth(getObjectFromGUID(city_zones_guids[1]).getPosition())
                        local bearMoved = function()
                            local bear = get_decks_and_cards_from_zone(city_zones_guids[1])
                            if bear[1] and bear[1].getName() == "Demon Bear" then
                                return true
                            else
                                return false
                            end
                        end
                        Wait.condition(click_push_villain_into_city,bearMoved)
                        broadcastToAll("Scheme Twist! The Demon Bear re-entered the city from ".. i .. " player's victory pile.",{1,0,0})
                        click_rescue_bystander(nil,i)
                        click_rescue_bystander(nil,i)
                        click_rescue_bystander(nil,i)
                        click_rescue_bystander(nil,i)
                        return nil
                    end
                end
            end
        end
        local kodobjects = get_decks_and_cards_from_zone(kopile_guid)
        if kodobjects[1] and kodobjects[1].tag == "Deck" then
            for _,object in pairs(kodobjects[1].getObjects()) do
                if object.name == "Demon Bear" then
                    kodobjects[1].takeObject({guid=object.guid,
                        position=getObjectFromGUID(city_zones_guids[1]).getPosition(),
                        smooth=true,
                        callback_function = click_push_villain_into_city})

                    broadcastToAll("Scheme Twist! The Demon Bear re-entered the city from the KO pile.",{1,0,0})
                    return nil
                end
            end
        elseif kodobjects[1] and kodobjects[1].tag == "Card" then
            if kodobjects[1].getName() == "Demon Bear" then
                kodobjects[1].setPositionSmooth(getObjectFromGUID(city_zones_guids[1]).getPosition())
                local bearMoved = function()
                    local bear = get_decks_and_cards_from_zone(city_zones_guids[1])
                    if bear[1] and bear[1].getName() == "Demon Bear" then
                        return true
                    else
                        return false
                    end
                end
                Wait.condition(click_push_villain_into_city,bearMoved)
                broadcastToAll("Scheme Twist! The Demon Bear re-entered the city from the KO pile.",{1,0,0})
                return nil
            end
        end
        --thor not found
        broadcastToAll("The Demon Bear not found? Where is he?")
        return nil
    end
    if schemeParts[1] == "The Fountain of Eternal Life" then
        broadcastToAll("Scheme Twist: A villain from your victory pile enters the sewers. Twist card is put on bottom of the villain deck.")
        local vpile = get_decks_and_cards_from_zone(vpileguids[Turns.turn_color])[1]
        local pos = getObjectFromGUID(city_zones_guids[1]).getPosition()
        if vpile and vpile.tag == "Deck" then
            local villainsfound = {}
            for _,o in pairs(vpile.getObjects()) do
                for _,tag in pairs(o.tags) do
                    if tag == "Villain" then
                        table.insert(villainsfound,o.guid)
                        break
                    end
                end
            end
            if #villainsfound > 1 then
                local thirstyVillain = function(obj)
                    obj.setPositionSmooth(pos)
                    Wait.time(click_push_villain_into_city,1)
                end
                offerCards({color = Turns.turn_color,
                    pile = vpile,
                    guids = villainsfound,
                    resolve_function = thirstyVillain,
                    tooltip = "Push this villain card into the city.",
                    label = "Push"})
            elseif villainsfound[1] then
                vpile.takeObject({position = pos,
                    smooth = true,
                    guid = villainsfound[1],
                    callback_function = click_push_villain_into_city})
            end
        elseif vpile and vpile.hasTag("Villain") then
            vpile.setPositionSmooth(pos)
            Wait.time(click_push_villain_into_city,1)
        end
        local vildeck = get_decks_and_cards_from_zone(villainDeckZoneGUID)
        if vildeck[1] then
            local pos = vildeck[1].getPosition()
            pos.y = pos.y + 3
            vildeck[1].setPositionSmooth(pos)
        end
        cards[1].flip()
        cards[1].setPositionSmooth(getObjectFromGUID(villainDeckZoneGUID).getPosition())
        return nil
    end
    if schemeParts[1] == "The God-Emperor of Battleworld" then
        if twistsresolved == 1 then
            local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)
            if scheme[1] then
                broadcastToAll("Scheme Twist: The scheme ascended to be a Mastermind!")
                powerButton({obj = scheme[1],
                    label = 9,
                    tooltip = "This scheme is now a mastermind named God-Emperor."})
                scheme[1].addTag("Mastermind")
                scheme[1].addTag("VP9")
                scheme[1].setName("God-Emperor")
                local mmZone = getObjectFromGUID(mmZoneGUID)
                mmZone.Call('updateMasterminds',"God-Emperor")
                mmZone.Call('updateMastermindsLocation',{"God-Emperor",schemeZoneGUID})
                mmZone.Call('setupMasterminds',{"God-Emperor",false,0})
            else
                broadcastToAll("Missing scheme card?")
                return nil    
            end
        elseif twistsresolved < 7 then
            stackTwist(cards[1])
            local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)
            if scheme[1] then 
                scheme[1].editButton({label = 9 + 2*twistsstacked})
            end
            broadcastToAll("Scheme Twist: The God-Emperor gets +2")
            return nil
        elseif twistsresolved == 7 then
            broadcastToAll("Scheme Twist: The God-Emperor KO's all other masterminds!")
            local iter = 0
            local mmZone = getObjectFromGUID(mmZoneGUID)
            local masterminds = table.clone(mmZone.Call('returnVar',"masterminds"))
            local mmLocations = table.clone(mmZone.Call('returnVar',"mmLocations"),true)
            for i,o in ipairs(masterminds) do
                if o ~= "God-Emperor" then
                    local mm = get_decks_and_cards_from_zone(mmLocations[o])
                    if mm[1] then
                        for _,o in pairs(mm) do
                            if o.is_face_down then
                                o.flip()
                            end
                            koCard(o)
                        end
                    end
                    getObjectFromGUID(mmLocations[o]).clearButtons()
                    mmZone.Call('removeMasterminds',i-iter)
                    iter = iter + 1
                end
            end
        elseif twistsresolved == 8 then
            broadcastToAll("Scheme Twist: Evil Wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "The Korvac Saga" then
        if twistsresolved % 2 == 1 and twistsresolved < 9 then
            local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)
            scheme[1].flip()
            scheme[1].addTag("VP9")
            scheme[1].addTag("Villain")
            getObjectFromGUID(schemeZoneGUID).createButton({click_function='updatePower',
                function_owner=self,
                position={0,0,0},
                rotation={0,180,0},
                label="19",
                tooltip="The Korvac entity",
                font_size=350,
                font_color={1,0,0},
                color={0,0,0,0.75},
                width=250,height=250})
            killKoBystanderButton = function(color)
                local vpile= getObjectFromGUID(vpileguids[color])
                local vpbuttons = vpile.getButtons()
                if vpbuttons then
                    for i,b in pairs(vpbuttons) do
                        if b.click_function:find("koBystander") then
                            vpile.removeButton(i-1)
                            break
                        end
                    end
                end
            end
            for _,o in pairs(Player.getPlayers()) do
                local hand = o.getHandObjects()
                if # hand > 4 then
                    promptDiscard({color = o.color,
                        hand = hand,
                        n = #hand-4,
                        trigger_function = killKoBystanderButton,
                        args = o.color})
                    local vpile = getObjectFromGUID(vpileguids[o.color])
                    _G["koBystander" .. o.color] = function(obj)
                        local vpilecontent = get_decks_and_cards_from_zone(obj.guid)
                        local bsguids = {}
                        if vpilecontent[1] and vpilecontent[1].tag == "Deck" then
                            for _,c in pairs(vpilecontent[1].getObjects()) do
                                for _,t in pairs(c.tags) do
                                    if t == "Bystander" then
                                        table.insert(bsguids,c.guid)
                                        break
                                    end
                                end
                            end
                        elseif vpilecontent[1] and vpilecontent[1].hasTag("Bystander") then
                            koCard(vpilecontent[1])
                            table.insert(bsguids,"ko")
                        end
                        local color = nil
                        for c,g in pairs(vpileguids) do
                            if g == obj.guid then
                                color = c
                                break
                            end
                        end
                        if bsguids[1] then
                            killKoBystanderButton(color)
                            local hand = Player[color].getHandObjects()
                            for _,h in pairs(hand) do
                                h.clearButtons()
                            end
                            if bsguids[1] ~= "ko" and bsguids[2] then
                                offerCards({color = color,
                                    pile = vpilecontent[1],
                                    guids = bsguids,
                                    resolve_function = koCard,
                                    tooltip = "KO this Bystander.",
                                    label = "KO"})
                            elseif bsguids[1] ~= "ko" then
                                vpilecontent[1].takeObject({position = getObjectFromGUID(kopile_guid).getPosition(),
                                    smooth = true,
                                    guid = bsguids[1]})
                            end
                        else
                            broadcastToColor("Can't KO a bystander, none found!",color,color)
                        end
                    end
                    vpile.createButton({click_function="koBystander" .. o.color,
                        function_owner=self,
                        position={0,0,0},
                        rotation={0,180,0},
                        label="KO",
                        tooltip="KO a bystander.",
                        font_size=200,
                        font_color="Black",
                        color={1,1,1},
                        width=650,height=400})
                else
                    broadcastToColor("Scheme Twist: But you have 4 or less cards in hand, so you don't need to discard. You may KO a bystander if you really hate it.",o.color,o.color)
                end
            end
        elseif twistsresolved < 8 then
            for _,o in pairs(Player.getPlayers()) do
                local hand = o.getHandObjects()
                if hand[1] then
                    local hand = o.getHandObjects()
                    local avengers = {}
                    for _,obj in pairs(hand) do
                        if hasTag2(obj,"Team:") and hasTag2(obj,"Team:") == "Avengers" then
                            table.insert(avengers,obj)
                        end
                    end
                    if avengers[1] then
                        promptDiscard({color = o.color,hand = avengers})
                    else
                        click_get_wound(nil,o.color)
                    end
                else
                    click_get_wound(nil,o.color)
                end
            end
            local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)
            scheme[1].flip()
            scheme[1].removeTag("VP9")
            scheme[1].removeTag("Villain")
            getObjectFromGUID(schemeZoneGUID).clearButtons()
        elseif twistsresolved == 8 then
            broadcastToAll("Scheme Twist: Evil wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "The Kree-Skrull War" then
        if twistsresolved < 8 then
            for _,o in pairs(city) do
                local citycontent = get_decks_and_cards_from_zone(o)
                if citycontent[1] then
                    for _,obj in pairs(citycontent) do
                        if hasTag2(obj,"Group:",7) and (hasTag2(obj,"Group:",7) == "Kree Starforce" or hasTag2(obj,"Group:",7) == "Skrulls") then
                            shift_to_next(citycontent,getObjectFromGUID(escape_zone_guid),0)
                            break
                        end
                    end
                end
            end
            local kreeskrull = function()
                local escaped = get_decks_and_cards_from_zone(escape_zone_guid)
                local skree = 0
                if escaped[1] and escaped[1].tag == "Deck" then
                    for _,o in pairs(escaped[1].getObjects()) do
                        for _,tag in pairs(o.tags) do
                            if tag == "Group:Kree Starforce" then
                                skree = skree - 1
                                break
                            elseif tag == "Group:Skrulls" then
                                skree = skree + 1
                                break
                            end
                        end
                    end
                elseif escaped[1] and hasTag2(escaped[1],"Group:",7) then
                    if hasTag2(escaped[1],"Group:",7) == "Kree Starforce" then
                        skree = -1
                    elseif hasTag2(escaped[1],"Group:",7) == "Skrulls" then
                        skree = 1
                    end
                end
                if skree < 0 then
                    cards[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[2]).getPosition())
                    broadcastToAll("Scheme Twist: All Kree and Skrull villains escape! Kree Conquest!")
                elseif skree > 0 then
                    cards[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[4]).getPosition())
                    broadcastToAll("Scheme Twist: All Kree and Skrull villains escape! Skrull Conquest!")
                else
                    broadcastToAll("Scheme Twist: All Kree and Skrull villains escape! Stalemate, no conquest!")
                    koCard(cards[1])
                end
            end
            Wait.time(kreeskrull,2)
        elseif twistsresolved == 8 then
            local skree = get_decks_and_cards_from_zone(topBoardGUIDs[2])
            local skrull = get_decks_and_cards_from_zone(topBoardGUIDs[4])
            local score = math.abs(skrull[1].getQuantity()) - math.abs(skree[1].getQuantity())
            if score < 0 then
                cards[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[2]).getPosition())
                broadcastToAll("Scheme Twist: Kree Conquest!")
            elseif score > 0 then
                cards[1].setPositionSmooth(getObjectFromGUID(topBoardGUIDs[4]).getPosition())
                broadcastToAll("Scheme Twist: Skrull Conquest!")
            else
                broadcastToAll("Scheme Twist: Stalemate, no conquest!")
                koCard(cards[1])
            end
        end
        return nil
    end
    if schemeParts[1] == "The Legacy Virus" then
        local players =revealCardTrait("Silver")
        for _,o in pairs(players) do
            click_get_wound(nil,o.color)
            broadcastToAll("Scheme Twist. Player " .. o.color .. " got a wound!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "The Mark of Khonshu" then
        playVillains({n=2})
        return twistsresolved
    end
    if schemeParts[1] == "The Unbreakable Enigma Code" then
        if twistsresolved < 6 then
            local herodeck = get_decks_and_cards_from_zone(heroDeckZoneGUID)
            if herodeck[1] and herodeck[1].tag == "Deck" then
                herodeck[1].takeObject({position = getObjectFromGUID(twistZoneGUID).getPosition(),
                    smooth = true})
            elseif herodeck[1] then
                herodeck[1].setPositionSmooth(getObjectFromGUID(twistZoneGUID).getPosition())
            else
                broadcastToAll("Hero deck ran out!")
                return twistsresolved
            end
            local shufflethecode = function()
                local code = get_decks_and_cards_from_zone(twistZoneGUID)
                code[1].randomize()
                broadcastToAll("Scheme Twist: Card from the hero deck added to the Enigma Code!")
            end
            Wait.time(shufflethecode,2)
        elseif twistsresolved == 6 then
            broadcastToAll("Scheme Twist: Evil Wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Tornado of Terrigen Mists" then
        koCard(cards[1])
        if twistsresolved == 6 then
            invertedcity = {}
            for i=1,5 do
                table.insert(invertedcity,city[6-i])
            end
        end
        if twistsresolved == 1 then
            local scheme = get_decks_and_cards_from_zone(schemeZoneGUID)
            if scheme[1] then
                scheme[1].setPositionSmooth(getObjectFromGUID(allTopBoardGUIDS[11]).getPosition())
            else
                broadcastToAll("Scheme card missing?")
                return nil
            end
        elseif twistsresolved < 6 then
            local citycontent = getObjectFromGUID(city[twistsresolved-1]).getObjects()
            if citycontent then
                for _,o in pairs(citycontent) do
                    if o.tag == "Figurine" then
                        click_get_wound(nil,o.getName():gsub(" Player",""))
                    end
                end
            end
            local scheme = get_decks_and_cards_from_zone(allTopBoardGUIDS[13-twistsresolved])[1]
            scheme.setPositionSmooth(getObjectFromGUID(allTopBoardGUIDS[12-twistsresolved]).getPosition())
            Wait.time(click_push_villain_into_city,1)
        elseif twistsresolved < 10 then
            local citycontent = getObjectFromGUID(invertedcity[twistsresolved-5]).getObjects()
            if citycontent then
                for _,o in pairs(citycontent) do
                    if o.tag == "Figurine" then
                        click_get_wound(nil,o.getName():gsub(" Player",""))
                    end
                end
            end
            local scheme = get_decks_and_cards_from_zone(allTopBoardGUIDS[twistsresolved+1])[1]
            scheme.setPositionSmooth(getObjectFromGUID(allTopBoardGUIDS[twistsresolved+2]).getPosition())
            local inverted_push = function()
                local city_topush = table.clone(invertedcity)
                local cardfound = false
                while cardfound == false do
                    local cards = get_decks_and_cards_from_zone(city_topush[1])
                    local locationfound = false
                    if cards[1] and not cards[2] then
                        if cards[1].getDescription():find("LOCATION") then
                            locationfound = true
                        end
                    end
                    if not next(cards) or locationfound == true then
                        table.remove(city_topush,1)
                    else
                        cardfound = true
                    end
                    if not city_topush[1] then
                        cardfound = true
                    end
                end
                if city_topush[1] then
                    push_all(city_topush)
                end
            end
            Wait.time(inverted_push,1)
        elseif twistsresolved == 10 then
            broadcastToAll("Scheme Twist: Evil wins!")
        end
        return nil
    end
    if schemeParts[1] == "Train black widows in the red room" then
        broadcastToAll("not scripted twist")
        return nil
    end
    if schemeParts[1] == "Transform Citizens Into Demons" then
        local bsPile = get_decks_and_cards_from_zone(bszoneguid)[1]
        if twistsresolved == 1 then
            getObjectFromGUID(twistZoneGUID).createButton({click_function="updatePower",
                function_owner=self,
                position={0,0,0},
                rotation={0,180,0},
                label="2",
                tooltip="Fight for 2 to rescue one of these bystanders.",
                font_size=350,
                font_color="Red",
                color={0,0,0,0.75},
                width=250,height=250})
            getObjectFromGUID(twistZoneGUID).createButton({click_function="updatePower",
                function_owner=self,
                position={0,0,1},
                rotation={0,180,0},
                label="(5)",
                tooltip="5 Bystanders remaining",
                font_size=350,
                font_color="White",
                color={0,0,0,0.75},
                width=250,height=250})
        end
        for i=1,5 do
            bsPile.takeObject({position = getObjectFromGUID(twistZoneGUID).getPosition(),
                smooth = true})
        end
        function onObjectEnterZone(zone,object)
            if zone == getObjectFromGUID(twistZoneGUID) then
                local goblin = get_decks_and_cards_from_zone(twistZoneGUID)
                if goblin[1] then
                    goblincount = math.abs(goblin[1].getQuantity())
                else
                    goblincount = 0
                end
                zone.editButton({index=1,
                    label="(" .. goblincount .. ")",
                    tooltip=goblincount .. " Bystanders remaining"})
                updatePower()
            end
        end
        function onObjectLeaveZone(zone,object)
            if zone == getObjectFromGUID(twistZoneGUID) then
                local goblin = get_decks_and_cards_from_zone(twistZoneGUID)
                if goblin[1] then
                    goblincount = math.abs(goblin[1].getQuantity())
                else
                    goblincount = 0
                end
                zone.editButton({index=1,
                    label="(" .. goblincount .. ")",
                    tooltip=goblincount .. " Bystanders remaining"})
                updatePower()
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Transform Commuters into Giant Ants" then
        stackTwist(cards[1])
        if twistsresolved == 1 then
            getObjectFromGUID(topBoardGUIDs[1]).createButton({click_function="updatePower",
                function_owner=self,
                position={0,0,0},
                rotation={0,180,0},
                label="2",
                tooltip="Fight for 2 to rescue one of these Giant Ant bystanders.",
                font_size=350,
                font_color="Red",
                color={0,0,0,0.75},
                width=250,height=250})
        end
        for i=1,twistsstacked do
            addBystanders(topBoardGUIDs[1],false,true)
        end
        return nil
    end
    if schemeParts[1] == "Trap Heroes in the Microverse" then
        playVillains({n=2})
        return twistsresolved
    end
    if schemeParts[1] == "Trapped in the Insane Asylum" then
        cards[1].setName("Psychotic Break")
        cards[1].setDescription("ARTIFACT: Not really, but this ensures it sticks during cleanup.")
        cards[1].setPositionSmooth(getObjectFromGUID(playerBoards[Turns.turn_color]).positionToWorld({-1.5,4,4}))
        currentPsychoticBreak = cards[1]
        broadcastToAll("Scheme Twist: Discard a card and pass the break to the next player, or keep it!")
        promptPsychoticBreakChoice = function(color)
            promptDiscard({color = color,
                trigger_function = shiftPsychoticBreak,
                args = color})
            keepPsychoticBreak = function(obj)
                obj.clearButtons()
                local color = nil
                for _,o in pairs(Player.getPlayers()) do
                    local playcontent = get_decks_and_cards_from_zone(playguids[o.color])
                    if playcontent[1] then
                        for _,k in pairs(playcontent) do
                            if k.guid == obj.guid then
                                color = o.color
                                break
                            end
                        end
                        if color then
                            break
                        end
                    end
                end
                local pos = obj.getPosition()
                if color == "White" then
                    pos.z = pos.z + 14
                elseif color == "Blue" then
                    pos.z = pos.z - 14
                else
                    pos.x = pos.x + 14
                end
                obj.setPositionSmooth(pos)
                obj.locked = true
                local hand = Player[color].getHandObjects()
                for _,h in pairs(hand) do
                    h.clearButtons()
                end
            end
            currentPsychoticBreak.createButton({click_function="keepPsychoticBreak",
                function_owner=self,
                position={0,22,0},
                label="Keep",
                tooltip="Keep this psychotic break.",
                font_size=250,
                font_color="Black",
                color={1,1,1},
                width=750,height=450})
        end
        shiftPsychoticBreak = function(color)
            local nextcolor = getNextColor(color)
            currentPsychoticBreak.setPositionSmooth(getObjectFromGUID(playerBoards[nextcolor]).positionToWorld({-1.5,4,4}))
            promptPsychoticBreakChoice(nextcolor)
        end
        promptPsychoticBreakChoice(Turns.turn_color)
        function onPlayerTurn(player)
            local playcontent = get_decks_and_cards_from_zone(playguids[player.color])
            if playcontent[1] then
                local breakcount = 0
                for _,o in pairs(playcontent) do
                    if o.tag == "Deck" then
                        for _,k in pairs(o.getObjects()) do
                            if k.name == "Psychotic Break" then
                                breakcount = breakcount + 1
                            end
                        end
                    elseif o.tag == "Card" then
                        if o.getName() == "Psychotic Break" then
                            breakcount = breakcount + 1
                        end
                    end
                end
                if breakcount > 0 then
                    local hand = player.getHandObjects()
                    local pos = getObjectFromGUID(playerBoards[player.color]).positionToWorld({-3.5,4,4})
                    if #hand >= breakcount*2 then
                        for i=1,breakcount*2 do
                            local card = table.remove(hand,math.random(#hand))
                            card.setPosition(pos)
                            pos.x = pos.x + 1
                            pos.y = pos.y + 1
                        end
                    else
                        for i=1,#hand do
                            local card = table.remove(hand,math.random(#hand))
                            card.setPosition(pos)
                            pos.x = pos.x + 1
                            pos.y = pos.y + 1
                        end
                    end
                    broadcastToColor("Psychotic Break! Play and activate cards from hand in random order, from left to right!",player.color,player.color)
                end
            end
        end
        return nil
    end
    if schemeParts[1] == "Turn the Soul of Adam Warlock" then
        local adam = get_decks_and_cards_from_zone(topBoardGUIDs[1])
        local setUnPure = function(obj)
            obj.addTag("Unpure")
        end
        if adam[1] then
            adam[1].takeObject({position = self.getPosition(),
                callback_function = setUnPure})
            broadcastToAll("Scheme Twist: Purify Adam or his soul becomes more corrupted!")
        else
            broadcastToAll("Adam not found?")
        end
        return twistsresolved
    end
    if schemeParts[1] == "Unite the Shards" then
        stackTwist(cards[1])
        gainShard(nil,mmZoneGUID,twistsstacked)
        broadcastToAll("Scheme Twist: The Mastermind gains " .. twistsstacked .. " shards.")
        return nil
    end
    if schemeParts[1] == "United States Split by Civil War" then
        for i=4,5 do
            local cardz = get_decks_and_cards_from_zone(city[i])
            if cardz[1] then
                for _,o in pairs(cardz) do
                    if o.hasTag("Villain") then
                        cards[1].setPositionSmooth(getObjectFromGUID(allTopBoardGUIDS[10]).getPosition())
                        cards[1].setName("Western State Victory")
                        broadcastToAll("Scheme Twist! Western State Victory!")
                        return nil
                    end
                end
            end
        end
        local cardz = get_decks_and_cards_from_zone(city[1])
        if cardz[1] then
            for _,o in pairs(cardz) do
                if o.hasTag("Villain") then
                    cards[1].setPositionSmooth(getObjectFromGUID(allTopBoardGUIDS[11]).getPosition())
                    cards[1].setName("Eastern State Victory")
                    broadcastToAll("Scheme Twist! Eastern State Victory!")
                    return nil
                end
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Unleash the Power of the Cosmic Cube" then
        stackTwist(cards[1])
        if twistsresolved == 5 or twistsresolved == 6 then
            dealWounds()
        elseif twistsresolved == 7 then
            dealWounds()
            dealWounds()
            dealWounds()
        elseif twistsresolved == 8 then
            broadcastToAll("Cosmic Cube UNLEASHED!! Evil wins",{1,0,0})
        end
        return nil
    end
    if schemeParts[1] == "War for the Dream Dimension" then
        broadcastToAll("This twist is not scripted yet.")
        return nil
    end
    if schemeParts[1] == "War of Kings" then
        stackTwist(cards[1])
        broadcastToAll("Scheme Twist: Pay the battlefront tax or lose a battle.")
        payBattlefront = function(obj,player_clicker_color)
            local butt = obj.getButtons()
            for i,o in pairs(butt) do
                if o.click_function == "payBattlefront" then
                    obj.removeButton(i-1)
                    break
                end
            end
            getObjectFromGUID(setupGUID).Call('thrones_favor',{"any",player_clicker_color,true})
            broadcastToAll("Battlefront tax paid. You may KO one of your heroes!")
        end
        getObjectFromGUID(schemeZoneGUID).createButton({click_function="payBattlefront",
            function_owner=self,
            position={0,0,0},
            rotation={0,180,0},
            label="Pay " .. twistsstacked .. "*",
            tooltip="Pay 1 Recruit for each stacked twist.",
            font_size=100,
            font_color="Black",
            color="Yellow",
            width=500,height=150})
        local pcolor = Turns.turn_color
        local turnChanged = function()
            if Turns.turn_color == pcolor then
                return false
            else
                return true
            end
        end
        local victoriousGeneral = function()
            local butt = getObjectFromGUID(schemeZoneGUID).getButtons()
            local paid = true
            for i,o in pairs(butt) do
                if o.click_function == "payBattlefront" then
                    getObjectFromGUID(schemeZoneGUID).removeButton(i-1)
                    paid = false
                    break
                end
            end
            if paid == true then
                return nil
            end
            getObjectFromGUID(officerDeckGUID).takeObject({position = getObjectFromGUID(twistZoneGUID).getPosition(),
                flip = true,
                smooth = false})
            local thronesfavor = callGUID("thronesfavor",1)
            if thronesfavor:find("mm") then
                click_get_wound(nil,pcolor)
                broadcastToAll("Victorious General! The mastermind had the Throne's Favor so player " .. pcolor .. " got a wound!")
            else
                local mmLocations = table.clone(getObjectFromGUID(mmZoneGUID).Call('returnVar',"mmLocations"),true)
                local mm = nil
                for i,o in pairs(mmLocations) do
                    if o == mmZoneGUID then
                        mm = i
                        break
                    end
                end
                if mm then
                    getObjectFromGUID(setupGUID).Call('thrones_favor',{"any","mm" .. mm})
                     broadcastToAll("Victorious General! The mastermind gains the Throne's Favor!")
                else
                    for i,o in pairs(mmLocations) do
                        mm = i
                        break
                    end
                    getObjectFromGUID(setupGUID).Call('thrones_favor',{"any","mm" .. mm})
                    broadcastToAll("Victorious General! Another remaining mastermind gains the Throne's Favor!")
                end
            end
        end
        Wait.condition(victoriousGeneral,turnChanged)
        return nil
    end
    if schemeParts[1] == "War of the Frost Giants" then
        cards[1].setName("Frost Giant Invader")
        cards[1].addTag("VP6")
        cards[1].addTag("Villain")
        cards[1].setDescription("If you are not Worthy (reveal a Hero that costs 5 or more), Frost Giant Invader gets +4.")
        powerButton({obj = cards[1],
            label = "6+",
            tooltip = "This twist is a Frost Giant Invader villain that gets +4 if you are not Worthy."})
        broadcastToAll("Scheme Twist: The twist cards enters the city as a Frost Giant Invader!")
        if twistsresolved == 8 or twistsresolved == 9 then
            local pos = getObjectFromGUID(villainDeckZoneGUID).getPosition()
            pos.y = pos.y + 2
            local giantsfound = 0
            for _,o in pairs(Player.getPlayers()) do
                local vpile = get_decks_and_cards_from_zone(vpileguids[o.color])
                if vpile[1] and vpile[1].tag == "Deck" then
                    for _,obj in pairs(vpile[1].getObjects()) do
                        if obj.name == "Frost Giant Invader" then
                            vpile[1].takeObject({position = pos,
                                guid = obj.guid,
                                flip = true})
                            giantsfound = giantsfound + 1
                            break
                        end
                    end
                elseif vpile[1] and vpile[1].getName() == "Frost Giant Invader" then
                    vpile[1].flip()
                    vpile[1].setPositionSmooth(pos)
                    giantsfound = giantsfound + 1
                end
            end
            if giantsfound > 0 then
                Wait.time(function() playVillains({n=giantsfound}) end,2.5)
                broadcastToAll("Scheme Twist: " .. giantsfound .. " Frost Giant Invaders put on top of villain deck from player's victory piles. Please play them all!")
            end
        end
        return twistsresolved
    end
    if schemeParts[1] == "Weave a Web of Lies" then
        stackTwist(cards[1])
        return nil
    end
    if schemeParts[1] == "World War Hulk" then
        if twistsresolved < 9 then
            local mmLocations = table.clone(getObjectFromGUID(mmZoneGUID).Call('returnVar',"mmLocations"),true)
            for i,o in pairs(mmLocations) do
                if o == mmZoneGUID and getObjectFromGUID(mmZoneGUID).Call('mmActive',i) then
                    addNewLurkingMM(i)
                    break
                end
            end
        elseif twistsresolved == 9 then
            broadcastToAll("Scheme Twist: Evil wins!")
        end
        return twistsresolved
    end
    if schemeParts[1] == "X-Cutioner's Song" then
        koCard(cards[1])
        for _,o in pairs(city) do
            local citycontent = get_decks_and_cards_from_zone(o)
            if citycontent[1] then
                for _,obj in pairs(citycontent) do
                    if hasTag2(obj,"Cost:") then
                        koCard(obj)
                    end
                end
            end
        end
        broadcastToAll("Scheme Twist: all Heroes captured by enemies KO'd. Play another card from the Villain Deck.") 
        playVillains()
        return nil
    end
    if schemeParts[1] == "X-Men Danger Room Goes Berserk" then
        broadcastToAll("Scheme Twist: Trap! By End of Turn: You may pay 2*. If you do, shuffle this Twist back into the Villain Deck, then play a card from the Villain Deck.") 
        moveToxin = function(obj)
            obj.flip()
            obj.setPositionSmooth(getObjectFromGUID(villainDeckZoneGUID).getPosition())
            local shuffleToxin = function()
                get_decks_and_cards_from_zone(villainDeckZoneGUID)[1].randomize()
                playVillains()
            end
            Wait.time(shuffleToxin,1.5)
        end
        powerButton({obj = cards[1],
            label = "2*",
            color = "Yellow",
            tooltip = "Pay two Recruit by end of turn to shuffle this toxin back.",
            click_f = "moveToxin"})
        local pcolor = Turns.turn_color
        local guid = cards[1].guid
        local turnChanged = function()
            if Turns.turn_color == pcolor then
                return false
            else
                return true
            end
        end
        local villainousInterruption = function()
            local card = get_decks_and_cards_from_zone(city_zones_guids[1])
            if card[1] and card[1].guid == guid then
                cards[1].clearButtons()
                stackTwist(card[1])
                broadcastToAll("Last turn's twist stacked next to the Scheme as an Airborne Neurotoxin.")
            end
        end
        Wait.condition(villainousInterruption,turnChanged)
        return nil
    end
    return twistsresolved
end

function addNewLurkingMM(currentmm)
    if not lurking then
        lurking = table.clone(getObjectFromGUID(setupGUID).Call('returnLurking'))
        lurkingLocations = {}
        for i = 1,3 do
            lurkingLocations[lurking[i]] = topBoardGUIDs[2*i]
        end
    end
    if lurking[1] then
        local newmm = table.remove(lurking,math.random(#lurking))
        local mmZone = getObjectFromGUID(mmZoneGUID)
        mmZone.Call('updateMasterminds',newmm)
        mmZone.Call('updateMastermindsLocation',{newmm,mmZoneGUID})
        if currentmm then
            table.insert(lurking,currentmm)
            lurkingLocations[currentmm] = lurkingLocations[newmm]
            mmZone.Call('removeMastermindsLocation',currentmm)
            local lurkingpos = getObjectFromGUID(lurkingLocations[currentmm]).getPosition()
            local strikelurkingpos = getObjectFromGUID(getStrikeloc(currentmm,lurkingLocations)).getPosition()
            for i,o in pairs(table.clone(mmZone.Call('returnVar',"masterminds"))) do
                if o == currentmm then
                    mmZone.Call('removeMasterminds',i)
                    break
                end
            end
            local mmcontent = get_decks_and_cards_from_zone(mmZoneGUID)
            for _,o in pairs(mmcontent) do
                if o.is_face_down == false then
                    lurkingpos.y = lurkingpos.y + 4
                else
                    lurkingpos.y = getObjectFromGUID(lurkingLocations[currentmm]).getPosition().y
                end
                o.setPositionSmooth(lurkingpos)
            end
            local strikecontent = get_decks_and_cards_from_zone(strikeZoneGUID)
            if strikecontent[1] then
                for _,o in pairs(strikecontent) do
                    o.setPositionSmooth(strikelurkingpos)
                    strikelurkingpos.y = strikelurkingpos.y + 4
                end
            end
            local strikeZone = getObjectFromGUID(strikeZoneGUID)
            local strikebutt = strikeZone.getButtons()
            local iter2 = 0
            if strikebutt then
                for i,o in ipairs(strikebutt) do
                    if o.click_function:find("update") and not o.click_function:find("Power") then
                        strikeZone.removeButton(i-1-iter2)
                        iter2 = iter2 + 1
                    end
                end
            end
        end
        local newmmposition = getObjectFromGUID(mmZoneGUID).getPosition()
        local newmmcontent = get_decks_and_cards_from_zone(lurkingLocations[newmm])
        for _,o in pairs(newmmcontent) do
            if o.is_face_down == false then
                newmmposition.y = newmmposition.y + 4
            else
                newmmposition.y = getObjectFromGUID(mmZoneGUID).getPosition().y
            end
            o.setPositionSmooth(newmmposition)
        end
        local newstrikeposition = getObjectFromGUID(strikeZoneGUID).getPosition()
        local newstrikecontent = get_decks_and_cards_from_zone(getStrikeloc(newmm,lurkingLocations))
        if newstrikecontent[1] then
            for _,o in pairs(newstrikecontent) do
                o.setPositionSmooth(newstrikeposition)
                newstrikeposition.y = newstrikeposition.y + 4
            end
        end
        getObjectFromGUID(mmZoneGUID).Call('fightButton',mmZoneGUID)
        if getObjectFromGUID(mmZoneGUID).Call('isTransformed',newmm) == true then
            getObjectFromGUID(mmZoneGUID).Call('addTransformButton',getObjectFromGUID(mmZoneGUID))
        else
            local butt = getObjectFromGUID(mmZoneGUID).getButtons()
            for _,o in pairs(butt) do
                if o.click_function == "transformMM" then
                    getObjectFromGUID(mmZoneGUID).removeButton(o.index)
                    break
                end
            end
        end
        broadcastToAll("Scheme Twist: Mastermind was switched with a random lurking mastermind!")
    elseif not table.clone(mmZone.Call('returnVar',"masterminds"))[1] then
        broadcastToAll("No More masterminds found, so you WIN!")
    else
        broadcastToAll("No More lurking masterminds found.")
    end